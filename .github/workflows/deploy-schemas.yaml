name: Deploy schemas

on:
  workflow_dispatch:
  release:
    types:
      - published
  push:
    branches:
      - master

jobs:
  deploy-schemas:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: sourcemeta/jsonschema@v7.1.2
      - uses: actions/setup-node@v4

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v4
        with:
          path: packages/json-schemas/node_modules
          key: json_node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install project dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |-
          cd packages/json-schemas
          npm ci

      - name: Install build dependencies
        run: npm -g install tsx

      - name: Build JSON schemas
        run: |-
          cd packages/json-schemas
          mkdir -p build/json-schemas
          cp schemas/content.json build/json-schemas/content.json
          cp schemas/content-schema.json build/json-schemas/content-schema.json
          cp schemas/project.json build/json-schemas/project.json
          
          bin/merge-schemas.ts schemas/template/catalog-template.json schemas/template/template.json build/json-schemas/catalog-template.json
          bin/bundle-schema.ts schemas/event/web-event.json build/json-schemas/web-event.json
          bin/bundle-schema.ts schemas/template/template.json build/json-schemas/template.json
          bin/bundle-schema.ts build/json-schemas/catalog-template.json build/json-schemas/catalog-template.json
          bin/bundle-schema.ts schemas/template/action.json build/json-schemas/action.json
          bin/transform-dynamic-schema.ts build/json-schemas/template.json build/json-schemas/template.json
          bin/transform-dynamic-schema.ts build/json-schemas/catalog-template.json build/json-schemas/catalog-template.json --template
          bin/transform-dynamic-schema.ts build/json-schemas/action.json build/json-schemas/action.json
          bin/transform-dynamic-schema.ts build/json-schemas/content.json build/json-schemas/template-content.json
          bin/transform-dynamic-schema.ts build/json-schemas/content-schema.json build/json-schemas/template-content-schema.json
          
          find build/json-schemas -type f -name '*.json' -exec tsx --tsconfig tsconfig.json bin/clean-nested-schema-props.ts '{}' '{}' \; 
          find build/json-schemas -type f -name "*.json" -exec sed -i -e 's|https://schema\.croct\.com/json/event/|https://schema.croct.com/json/v1/|g' {} +
          find build/json-schemas -type f -name "*.json" -exec sed -i -e 's|https://schema\.croct\.com/json/template/|https://schema.croct.com/json/v1/|g' {} +
          find build/json-schemas -type f -name "*.json" -exec sed -i -e '/https:\/\/schema\.croct\.com\/json\/v1\//! s|https://schema\.croct\.com/json/|https://schema.croct.com/json/v1/|g' {} +

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCLOUD_WORKLOAD_IDENTITY }}
          service_account: ${{ secrets.GCLOUD_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy pre-release to GCS
        if: ${{ github.event.release.prerelease || !github.ref || github.ref == 'refs/heads/master' }}
        run: |-
          gsutil -m rsync -r -d packages/json-schemas/build/json-schemas "gs://${GCLOUD_BUCKET}/json/next"
        env:
          GCLOUD_BUCKET: ${{ secrets.STORAGE_BUCKET_SCHEMAS }}

      - name: Deploy release to GCS
        if: ${{ github.event.release && !github.event.release.prerelease && github.ref }}
        run: |-
          TAG_MAJOR_VERSION=$(echo "${GITHUB_REF##*/}" | cut -d. -f1)
          MAJOR_VERSION=$(( TAG_MAJOR_VERSION < 1 ? 1 : TAG_MAJOR_VERSION ))
          VERSION_PATH="v${MAJOR_VERSION}"
          gsutil -m rsync -r -d packages/json-schemas/build/json-schemas "gs://${GCLOUD_BUCKET}/json/${VERSION_PATH}"
        env:
          GCLOUD_BUCKET: ${{ secrets.STORAGE_BUCKET_SCHEMAS }}
