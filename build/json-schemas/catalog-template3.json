{
  "$id": "https://schema.croct.com/json/template/catalog-template.json",
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "title": "Catalog template",
  "description": "A template listed in the catalog.",
  "type": "object",
  "allOf": [
    {
      "$ref": "#/$defs/template-template",
      "type": "object"
    },
    {
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Metadata about the template.",
          "$ref": "#/$defs/template-catalog-template-metadata",
          "type": "object"
        }
      }
    }
  ],
  "required": [
    "actions",
    "title",
    "description",
    "metadata"
  ],
  "additionalProperties": false,
  "$defs": {
    "content-schema": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Definition",
      "description": "The definition of a value.",
      "type": "object",
      "oneOf": [
        {
          "$ref": "#/$defs/content-schema/$defs/structure"
        },
        {
          "$ref": "#/$defs/content-schema/$defs/union"
        },
        {
          "$ref": "#/$defs/content-schema/$defs/text"
        },
        {
          "$ref": "#/$defs/content-schema/$defs/number"
        },
        {
          "$ref": "#/$defs/content-schema/$defs/boolean"
        },
        {
          "$ref": "#/$defs/content-schema/$defs/list"
        },
        {
          "$ref": "#/$defs/content-schema/$defs/reference"
        }
      ],
      "required": [
        "type"
      ],
      "properties": {
        "$schema": {
          "description": "The JSON schema reference for this content schema.",
          "type": "string"
        },
        "type": {
          "title": "Type",
          "description": "The type of the value.",
          "type": "string"
        }
      },
      "unevaluatedProperties": false,
      "$defs": {
        "boolean": {
          "title": "Boolean definition",
          "description": "The definition of a boolean value.",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "title": {
              "anyOf": [
                {
                  "title": "Title",
                  "description": "A title that identifies the definition.",
                  "examples": [
                    "Home banner",
                    "Discount flag",
                    "Palette"
                  ],
                  "type": "string",
                  "maxLength": 60,
                  "minLength": 1
                },
                {
                  "title": "Title",
                  "description": "A title that identifies the definition.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-string"
                }
              ]
            },
            "description": {
              "anyOf": [
                {
                  "title": "Description",
                  "description": "A brief description of the definition.",
                  "examples": [
                    "The banner that appears on the home page.",
                    "The flag that species whether a product is on sale.",
                    "The colors allowed in the design system."
                  ],
                  "type": "string",
                  "maxLength": 160,
                  "minLength": 1
                },
                {
                  "title": "Description",
                  "description": "A brief description of the definition.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-string"
                }
              ]
            },
            "default": {
              "anyOf": [
                {
                  "title": "Default value",
                  "description": "The value to be preselected on the user interface.",
                  "type": "boolean"
                },
                {
                  "title": "Default value",
                  "description": "The value to be preselected on the user interface.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            },
            "type": {
              "title": "Type",
              "description": "The data type.",
              "type": "string",
              "const": "boolean"
            },
            "label": {
              "anyOf": [
                {
                  "title": "Label",
                  "description": "The label to display for the input on the user interface.",
                  "type": "object",
                  "required": [
                    "true",
                    "false"
                  ],
                  "properties": {
                    "false": {
                      "anyOf": [
                        {
                          "title": "Label for false",
                          "description": "The label to display for the input when the value is false.",
                          "examples": [
                            "Off",
                            "Disabled",
                            "Hidden"
                          ],
                          "type": "string",
                          "maxLength": 60,
                          "minLength": 1
                        },
                        {
                          "title": "Label for false",
                          "description": "The label to display for the input when the value is false.",
                          "type": "string",
                          "$ref": "#/$defs/dynamic-string"
                        }
                      ]
                    },
                    "true": {
                      "anyOf": [
                        {
                          "title": "Label for true",
                          "description": "The label to display for the input when the value is true.",
                          "examples": [
                            "On",
                            "Enabled",
                            "Visible"
                          ],
                          "type": "string",
                          "maxLength": 60,
                          "minLength": 1
                        },
                        {
                          "title": "Label for true",
                          "description": "The label to display for the input when the value is true.",
                          "type": "string",
                          "$ref": "#/$defs/dynamic-string"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "patternProperties": {
                    "\\$\\{[\\s\\S]+?\\}": {}
                  }
                },
                {
                  "title": "Label",
                  "description": "The label to display for the input on the user interface.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "\\$\\{[\\s\\S]+?\\}": {}
          }
        },
        "definition": {
          "title": "Definition",
          "description": "The definition of a value.",
          "type": "object",
          "oneOf": [
            {
              "$ref": "#/$defs/content-schema/$defs/boolean"
            },
            {
              "$ref": "#/$defs/content-schema/$defs/number"
            },
            {
              "$ref": "#/$defs/content-schema/$defs/text"
            },
            {
              "$ref": "#/$defs/content-schema/$defs/structure"
            },
            {
              "$ref": "#/$defs/content-schema/$defs/union"
            },
            {
              "$ref": "#/$defs/content-schema/$defs/reference"
            },
            {
              "$ref": "#/$defs/content-schema/$defs/list"
            }
          ],
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "title": "Type",
              "description": "The type of the value.",
              "type": "string"
            }
          },
          "unevaluatedProperties": false
        },
        "list": {
          "title": "List definition",
          "description": "The definition of a list of values.",
          "type": "object",
          "required": [
            "type",
            "items"
          ],
          "properties": {
            "title": {
              "anyOf": [
                {
                  "title": "Title",
                  "description": "A title that identifies the definition.",
                  "examples": [
                    "Home banner",
                    "Discount flag",
                    "Palette"
                  ],
                  "type": "string",
                  "maxLength": 60,
                  "minLength": 1
                },
                {
                  "title": "Title",
                  "description": "A title that identifies the definition.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-string"
                }
              ]
            },
            "description": {
              "anyOf": [
                {
                  "title": "Description",
                  "description": "A brief description of the definition.",
                  "examples": [
                    "The banner that appears on the home page.",
                    "The flag that species whether a product is on sale.",
                    "The colors allowed in the design system."
                  ],
                  "type": "string",
                  "maxLength": 160,
                  "minLength": 1
                },
                {
                  "title": "Description",
                  "description": "A brief description of the definition.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-string"
                }
              ]
            },
            "type": {
              "title": "Type",
              "description": "The data type.",
              "type": "string",
              "const": "list"
            },
            "items": {
              "anyOf": [
                {
                  "title": "Items",
                  "description": "The definition of the items in the list.",
                  "$ref": "#/$defs/content-schema/$defs/definition"
                },
                {
                  "title": "Items",
                  "description": "The definition of the items in the list.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            },
            "itemLabel": {
              "anyOf": [
                {
                  "title": "Item label",
                  "description": "A label to prefix each item in the list in the user interface.",
                  "examples": [
                    "Item",
                    "Tag",
                    "Link",
                    "Card"
                  ],
                  "type": "string",
                  "maxLength": 60,
                  "minLength": 1
                },
                {
                  "title": "Item label",
                  "description": "A label to prefix each item in the list in the user interface.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-string"
                }
              ]
            },
            "maximumLength": {
              "anyOf": [
                {
                  "title": "Maximum items",
                  "description": "The maximum allowed number of items.",
                  "type": "number",
                  "maximum": 30,
                  "minimum": 0
                },
                {
                  "title": "Maximum items",
                  "description": "The maximum allowed number of items.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            },
            "minimumLength": {
              "anyOf": [
                {
                  "title": "Minimum items",
                  "description": "The minimum required number of items.",
                  "type": "number",
                  "maximum": 30,
                  "minimum": 0
                },
                {
                  "title": "Minimum items",
                  "description": "The minimum required number of items.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "\\$\\{[\\s\\S]+?\\}": {}
          }
        },
        "number": {
          "title": "Number definition",
          "description": "The definition of a numeric value.",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "title": {
              "anyOf": [
                {
                  "title": "Title",
                  "description": "A title that identifies the definition.",
                  "examples": [
                    "Home banner",
                    "Discount flag",
                    "Palette"
                  ],
                  "type": "string",
                  "maxLength": 60,
                  "minLength": 1
                },
                {
                  "title": "Title",
                  "description": "A title that identifies the definition.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-string"
                }
              ]
            },
            "description": {
              "anyOf": [
                {
                  "title": "Description",
                  "description": "A brief description of the definition.",
                  "examples": [
                    "The banner that appears on the home page.",
                    "The flag that species whether a product is on sale.",
                    "The colors allowed in the design system."
                  ],
                  "type": "string",
                  "maxLength": 160,
                  "minLength": 1
                },
                {
                  "title": "Description",
                  "description": "A brief description of the definition.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-string"
                }
              ]
            },
            "type": {
              "title": "Type",
              "description": "The data type.",
              "type": "string",
              "const": "number"
            },
            "maximum": {
              "anyOf": [
                {
                  "title": "Maximum",
                  "description": "The maximum allowed value.",
                  "type": "number",
                  "maximum": 9007199254740991,
                  "minimum": -9007199254740991
                },
                {
                  "title": "Maximum",
                  "description": "The maximum allowed value.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            },
            "minimum": {
              "anyOf": [
                {
                  "title": "Minimum",
                  "description": "The minimum allowed value.",
                  "type": "number",
                  "maximum": 9007199254740991,
                  "minimum": -9007199254740991
                },
                {
                  "title": "Minimum",
                  "description": "The minimum allowed value.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            },
            "integer": {
              "anyOf": [
                {
                  "title": "Integer only?",
                  "description": "Whether to allow only whole values.",
                  "type": "boolean"
                },
                {
                  "title": "Integer only?",
                  "description": "Whether to allow only whole values.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "\\$\\{[\\s\\S]+?\\}": {}
          }
        },
        "reference": {
          "title": "Reference definition",
          "description": "The definition of a reference to another definition.",
          "type": "object",
          "required": [
            "type",
            "id"
          ],
          "properties": {
            "id": {
              "title": "Definition ID",
              "description": "The ID of the referenced definition.",
              "type": "string",
              "minLength": 1
            },
            "title": {
              "anyOf": [
                {
                  "title": "Title",
                  "description": "A title that identifies the definition.",
                  "examples": [
                    "Home banner",
                    "Discount flag",
                    "Palette"
                  ],
                  "type": "string",
                  "maxLength": 60,
                  "minLength": 1
                },
                {
                  "title": "Title",
                  "description": "A title that identifies the definition.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-string"
                }
              ]
            },
            "description": {
              "anyOf": [
                {
                  "title": "Description",
                  "description": "A brief description of the definition.",
                  "examples": [
                    "The banner that appears on the home page.",
                    "The flag that species whether a product is on sale.",
                    "The colors allowed in the design system."
                  ],
                  "type": "string",
                  "maxLength": 160,
                  "minLength": 1
                },
                {
                  "title": "Description",
                  "description": "A brief description of the definition.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-string"
                }
              ]
            },
            "type": {
              "title": "Type",
              "description": "The data type.",
              "type": "string",
              "const": "reference"
            },
            "properties": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "unevaluatedProperties": false
        },
        "structure": {
          "title": "Structure definition",
          "description": "The definition of a structured value.",
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "title": {
              "anyOf": [
                {
                  "title": "Title",
                  "description": "A title that identifies the definition.",
                  "examples": [
                    "Home banner",
                    "Discount flag",
                    "Palette"
                  ],
                  "type": "string",
                  "maxLength": 60,
                  "minLength": 1
                },
                {
                  "title": "Title",
                  "description": "A title that identifies the definition.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-string"
                }
              ]
            },
            "description": {
              "anyOf": [
                {
                  "title": "Description",
                  "description": "A brief description of the definition.",
                  "examples": [
                    "The banner that appears on the home page.",
                    "The flag that species whether a product is on sale.",
                    "The colors allowed in the design system."
                  ],
                  "type": "string",
                  "maxLength": 160,
                  "minLength": 1
                },
                {
                  "title": "Description",
                  "description": "A brief description of the definition.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-string"
                }
              ]
            },
            "type": {
              "title": "Type",
              "description": "The data type.",
              "type": "string",
              "const": "structure"
            },
            "attributes": {
              "anyOf": [
                {
                  "title": "Attributes",
                  "description": "The definition of the attributes in the structure.",
                  "type": "object",
                  "maxProperties": 30,
                  "minProperties": 1,
                  "propertyNames": {
                    "anyOf": [
                      {
                        "type": "string",
                        "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
                        "maxLength": 60,
                        "minLength": 2
                      },
                      {
                        "type": "string",
                        "$ref": "#/$defs/dynamic-string"
                      }
                    ]
                  },
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "object",
                        "required": [
                          "type"
                        ],
                        "properties": {
                          "optional": {
                            "anyOf": [
                              {
                                "title": "Optional?",
                                "description": "Whether the attribute can be omitted.",
                                "type": "boolean"
                              },
                              {
                                "title": "Optional?",
                                "description": "Whether the attribute can be omitted.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          },
                          "description": {
                            "anyOf": [
                              {
                                "title": "Description",
                                "description": "The description to display for the attribute on the user interface.",
                                "examples": [
                                  "The hero's title.",
                                  "The call-to-action label.",
                                  "The headline of the page."
                                ],
                                "type": "string",
                                "maxLength": 160,
                                "minLength": 1
                              },
                              {
                                "title": "Description",
                                "description": "The description to display for the attribute on the user interface.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-string"
                              }
                            ]
                          },
                          "type": {
                            "anyOf": [
                              {
                                "$ref": "#/$defs/content-schema/$defs/definition"
                              },
                              {
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          },
                          "label": {
                            "anyOf": [
                              {
                                "title": "Label",
                                "description": "The label to display for the attribute on the user interface.",
                                "examples": [
                                  "Title",
                                  "Call to action",
                                  "Headline"
                                ],
                                "type": "string",
                                "maxLength": 60,
                                "minLength": 1
                              },
                              {
                                "title": "Label",
                                "description": "The label to display for the attribute on the user interface.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-string"
                              }
                            ]
                          },
                          "position": {
                            "anyOf": [
                              {
                                "title": "Position",
                                "description": "The order in which the attribute should be displayed.",
                                "type": "integer",
                                "minimum": 0
                              },
                              {
                                "title": "Position",
                                "description": "The order in which the attribute should be displayed.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          },
                          "private": {
                            "anyOf": [
                              {
                                "title": "Private?",
                                "description": "Whether the attribute is for internal use only and should not be exposed through the API.",
                                "type": "boolean"
                              },
                              {
                                "title": "Private?",
                                "description": "Whether the attribute is for internal use only and should not be exposed through the API.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "patternProperties": {
                          "\\$\\{[\\s\\S]+?\\}": {}
                        }
                      },
                      {
                        "type": "string",
                        "$ref": "#/$defs/dynamic-value"
                      }
                    ]
                  }
                },
                {
                  "title": "Attributes",
                  "description": "The definition of the attributes in the structure.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "\\$\\{[\\s\\S]+?\\}": {}
          }
        },
        "text": {
          "title": "Text definition",
          "description": "The definition of a text value.",
          "type": "object",
          "oneOf": [
            {
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "title": "Type",
                  "description": "The data type.",
                  "type": "string",
                  "const": "text"
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "\\$\\{[\\s\\S]+?\\}": {}
              }
            },
            {
              "required": [
                "type",
                "format"
              ],
              "properties": {
                "title": {
                  "anyOf": [
                    {
                      "title": "Title",
                      "description": "A title that identifies the definition.",
                      "examples": [
                        "Home banner",
                        "Discount flag",
                        "Palette"
                      ],
                      "type": "string",
                      "maxLength": 60,
                      "minLength": 1
                    },
                    {
                      "title": "Title",
                      "description": "A title that identifies the definition.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "description": {
                  "anyOf": [
                    {
                      "title": "Description",
                      "description": "A brief description of the definition.",
                      "examples": [
                        "The banner that appears on the home page.",
                        "The flag that species whether a product is on sale.",
                        "The colors allowed in the design system."
                      ],
                      "type": "string",
                      "maxLength": 160,
                      "minLength": 1
                    },
                    {
                      "title": "Description",
                      "description": "A brief description of the definition.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "type": {
                  "title": "Type",
                  "description": "The data type.",
                  "type": "string",
                  "const": "text"
                },
                "format": {
                  "anyOf": [
                    {
                      "title": "Format",
                      "description": "The pre-defined format that the text must match.",
                      "type": "string",
                      "enum": [
                        "color",
                        "url",
                        "multiline"
                      ]
                    },
                    {
                      "title": "Format",
                      "description": "The pre-defined format that the text must match.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "\\$\\{[\\s\\S]+?\\}": {}
              }
            },
            {
              "required": [
                "type",
                "pattern"
              ],
              "properties": {
                "title": {
                  "anyOf": [
                    {
                      "title": "Title",
                      "description": "A title that identifies the definition.",
                      "examples": [
                        "Home banner",
                        "Discount flag",
                        "Palette"
                      ],
                      "type": "string",
                      "maxLength": 60,
                      "minLength": 1
                    },
                    {
                      "title": "Title",
                      "description": "A title that identifies the definition.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "description": {
                  "anyOf": [
                    {
                      "title": "Description",
                      "description": "A brief description of the definition.",
                      "examples": [
                        "The banner that appears on the home page.",
                        "The flag that species whether a product is on sale.",
                        "The colors allowed in the design system."
                      ],
                      "type": "string",
                      "maxLength": 160,
                      "minLength": 1
                    },
                    {
                      "title": "Description",
                      "description": "A brief description of the definition.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "type": {
                  "title": "Type",
                  "description": "The data type.",
                  "type": "string",
                  "const": "text"
                },
                "pattern": {
                  "anyOf": [
                    {
                      "title": "Pattern",
                      "description": "The pattern that the text must match.",
                      "examples": [
                        "^[A-Z]",
                        "[0-9]{3}"
                      ],
                      "type": "string",
                      "format": "regex",
                      "maxLength": 100,
                      "minLength": 1
                    },
                    {
                      "title": "Pattern",
                      "description": "The pattern that the text must match.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "format": {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "multiline"
                      ]
                    },
                    {
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "maximumLength": {
                  "anyOf": [
                    {
                      "title": "Maximum length",
                      "description": "The maximum allowed length.",
                      "type": "number",
                      "maximum": 1000,
                      "minimum": 0
                    },
                    {
                      "title": "Maximum length",
                      "description": "The maximum allowed length.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                },
                "minimumLength": {
                  "anyOf": [
                    {
                      "title": "Minimum length",
                      "description": "The minimum allowed length.",
                      "type": "number",
                      "maximum": 1000,
                      "minimum": 0
                    },
                    {
                      "title": "Minimum length",
                      "description": "The minimum allowed length.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "\\$\\{[\\s\\S]+?\\}": {}
              }
            },
            {
              "required": [
                "type",
                "choices"
              ],
              "properties": {
                "title": {
                  "anyOf": [
                    {
                      "title": "Title",
                      "description": "A title that identifies the definition.",
                      "examples": [
                        "Home banner",
                        "Discount flag",
                        "Palette"
                      ],
                      "type": "string",
                      "maxLength": 60,
                      "minLength": 1
                    },
                    {
                      "title": "Title",
                      "description": "A title that identifies the definition.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "description": {
                  "anyOf": [
                    {
                      "title": "Description",
                      "description": "A brief description of the definition.",
                      "examples": [
                        "The banner that appears on the home page.",
                        "The flag that species whether a product is on sale.",
                        "The colors allowed in the design system."
                      ],
                      "type": "string",
                      "maxLength": 160,
                      "minLength": 1
                    },
                    {
                      "title": "Description",
                      "description": "A brief description of the definition.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "type": {
                  "title": "Type",
                  "description": "The data type.",
                  "type": "string",
                  "const": "text"
                },
                "choices": {
                  "anyOf": [
                    {
                      "title": "Choices",
                      "description": "The map of the allowed choices.",
                      "type": "object",
                      "maxProperties": 20,
                      "minProperties": 1,
                      "propertyNames": {
                        "anyOf": [
                          {
                            "type": "string",
                            "maxLength": 60
                          },
                          {
                            "type": "string",
                            "$ref": "#/$defs/dynamic-string"
                          }
                        ]
                      },
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "description": {
                                "anyOf": [
                                  {
                                    "title": "Description",
                                    "description": "The description to display for the choice on the user interface.",
                                    "examples": [
                                      "The hex code for the color red is #FF0000.",
                                      "Recommended for users with color blindness."
                                    ],
                                    "type": "string",
                                    "maxLength": 160,
                                    "minLength": 1
                                  },
                                  {
                                    "title": "Description",
                                    "description": "The description to display for the choice on the user interface.",
                                    "type": "string",
                                    "$ref": "#/$defs/dynamic-string"
                                  }
                                ]
                              },
                              "default": {
                                "anyOf": [
                                  {
                                    "title": "Default",
                                    "description": "Whether the choice is the default.",
                                    "type": "boolean"
                                  },
                                  {
                                    "title": "Default",
                                    "description": "Whether the choice is the default.",
                                    "type": "string",
                                    "$ref": "#/$defs/dynamic-value"
                                  }
                                ]
                              },
                              "label": {
                                "anyOf": [
                                  {
                                    "title": "Label",
                                    "description": "The label to display for the choice on the user interface.",
                                    "examples": [
                                      "Red",
                                      "Blue",
                                      "Left",
                                      "Bottom"
                                    ],
                                    "type": "string",
                                    "maxLength": 60,
                                    "minLength": 1
                                  },
                                  {
                                    "title": "Label",
                                    "description": "The label to display for the choice on the user interface.",
                                    "type": "string",
                                    "$ref": "#/$defs/dynamic-string"
                                  }
                                ]
                              },
                              "position": {
                                "anyOf": [
                                  {
                                    "title": "Position",
                                    "description": "The position of the choice in the list.",
                                    "type": "integer",
                                    "minimum": 0
                                  },
                                  {
                                    "title": "Position",
                                    "description": "The position of the choice in the list.",
                                    "type": "string",
                                    "$ref": "#/$defs/dynamic-value"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "patternProperties": {
                              "\\$\\{[\\s\\S]+?\\}": {}
                            }
                          },
                          {
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      }
                    },
                    {
                      "title": "Choices",
                      "description": "The map of the allowed choices.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "\\$\\{[\\s\\S]+?\\}": {}
              }
            },
            {
              "required": [
                "type",
                "minimumLength"
              ],
              "properties": {
                "title": {
                  "anyOf": [
                    {
                      "title": "Title",
                      "description": "A title that identifies the definition.",
                      "examples": [
                        "Home banner",
                        "Discount flag",
                        "Palette"
                      ],
                      "type": "string",
                      "maxLength": 60,
                      "minLength": 1
                    },
                    {
                      "title": "Title",
                      "description": "A title that identifies the definition.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "description": {
                  "anyOf": [
                    {
                      "title": "Description",
                      "description": "A brief description of the definition.",
                      "examples": [
                        "The banner that appears on the home page.",
                        "The flag that species whether a product is on sale.",
                        "The colors allowed in the design system."
                      ],
                      "type": "string",
                      "maxLength": 160,
                      "minLength": 1
                    },
                    {
                      "title": "Description",
                      "description": "A brief description of the definition.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "type": {
                  "title": "Type",
                  "description": "The data type.",
                  "type": "string",
                  "const": "text"
                },
                "format": {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "multiline"
                      ]
                    },
                    {
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "minimumLength": {
                  "anyOf": [
                    {
                      "title": "Minimum length",
                      "description": "The minimum allowed length.",
                      "type": "number",
                      "maximum": 1000,
                      "minimum": 0
                    },
                    {
                      "title": "Minimum length",
                      "description": "The minimum allowed length.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "\\$\\{[\\s\\S]+?\\}": {}
              }
            },
            {
              "required": [
                "type",
                "maximumLength"
              ],
              "properties": {
                "title": {
                  "anyOf": [
                    {
                      "title": "Title",
                      "description": "A title that identifies the definition.",
                      "examples": [
                        "Home banner",
                        "Discount flag",
                        "Palette"
                      ],
                      "type": "string",
                      "maxLength": 60,
                      "minLength": 1
                    },
                    {
                      "title": "Title",
                      "description": "A title that identifies the definition.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "description": {
                  "anyOf": [
                    {
                      "title": "Description",
                      "description": "A brief description of the definition.",
                      "examples": [
                        "The banner that appears on the home page.",
                        "The flag that species whether a product is on sale.",
                        "The colors allowed in the design system."
                      ],
                      "type": "string",
                      "maxLength": 160,
                      "minLength": 1
                    },
                    {
                      "title": "Description",
                      "description": "A brief description of the definition.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "type": {
                  "title": "Type",
                  "description": "The data type.",
                  "type": "string",
                  "const": "text"
                },
                "format": {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "multiline"
                      ]
                    },
                    {
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "maximumLength": {
                  "anyOf": [
                    {
                      "title": "Maximum length",
                      "description": "The maximum allowed length.",
                      "type": "number",
                      "maximum": 1000,
                      "minimum": 0
                    },
                    {
                      "title": "Maximum length",
                      "description": "The maximum allowed length.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "\\$\\{[\\s\\S]+?\\}": {}
              }
            },
            {
              "required": [
                "type",
                "minimumLength",
                "maximumLength"
              ],
              "properties": {
                "title": {
                  "anyOf": [
                    {
                      "title": "Title",
                      "description": "A title that identifies the definition.",
                      "examples": [
                        "Home banner",
                        "Discount flag",
                        "Palette"
                      ],
                      "type": "string",
                      "maxLength": 60,
                      "minLength": 1
                    },
                    {
                      "title": "Title",
                      "description": "A title that identifies the definition.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "description": {
                  "anyOf": [
                    {
                      "title": "Description",
                      "description": "A brief description of the definition.",
                      "examples": [
                        "The banner that appears on the home page.",
                        "The flag that species whether a product is on sale.",
                        "The colors allowed in the design system."
                      ],
                      "type": "string",
                      "maxLength": 160,
                      "minLength": 1
                    },
                    {
                      "title": "Description",
                      "description": "A brief description of the definition.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "type": {
                  "title": "Type",
                  "description": "The data type.",
                  "type": "string",
                  "const": "text"
                },
                "format": {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "multiline"
                      ]
                    },
                    {
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "maximumLength": {
                  "anyOf": [
                    {
                      "title": "Maximum length",
                      "description": "The maximum allowed length.",
                      "type": "number",
                      "maximum": 1000,
                      "minimum": 0
                    },
                    {
                      "title": "Maximum length",
                      "description": "The maximum allowed length.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                },
                "minimumLength": {
                  "anyOf": [
                    {
                      "title": "Minimum length",
                      "description": "The minimum allowed length.",
                      "type": "number",
                      "maximum": 1000,
                      "minimum": 0
                    },
                    {
                      "title": "Minimum length",
                      "description": "The minimum allowed length.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "\\$\\{[\\s\\S]+?\\}": {}
              }
            }
          ]
        },
        "union": {
          "title": "Union definition",
          "description": "The definition of a value that can take multiple forms.",
          "type": "object",
          "required": [
            "type",
            "types"
          ],
          "properties": {
            "title": {
              "anyOf": [
                {
                  "title": "Title",
                  "description": "A title that identifies the definition.",
                  "examples": [
                    "Home banner",
                    "Discount flag",
                    "Palette"
                  ],
                  "type": "string",
                  "maxLength": 60,
                  "minLength": 1
                },
                {
                  "title": "Title",
                  "description": "A title that identifies the definition.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-string"
                }
              ]
            },
            "description": {
              "anyOf": [
                {
                  "title": "Description",
                  "description": "A brief description of the definition.",
                  "examples": [
                    "The banner that appears on the home page.",
                    "The flag that species whether a product is on sale.",
                    "The colors allowed in the design system."
                  ],
                  "type": "string",
                  "maxLength": 160,
                  "minLength": 1
                },
                {
                  "title": "Description",
                  "description": "A brief description of the definition.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-string"
                }
              ]
            },
            "type": {
              "title": "Type",
              "description": "The data type.",
              "type": "string",
              "const": "union"
            },
            "types": {
              "anyOf": [
                {
                  "title": "Types",
                  "description": "The map of discriminators to definitions.",
                  "type": "object",
                  "maxProperties": 10,
                  "minProperties": 2,
                  "propertyNames": {
                    "anyOf": [
                      {
                        "type": "string",
                        "pattern": "^[A-Za-z]+(-?[A-Za-z0-9]+)*$",
                        "minLength": 1
                      },
                      {
                        "type": "string",
                        "$ref": "#/$defs/dynamic-string"
                      }
                    ]
                  },
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/$defs/content-schema/$defs/reference"
                      },
                      {
                        "type": "string",
                        "$ref": "#/$defs/dynamic-value"
                      }
                    ]
                  }
                },
                {
                  "title": "Types",
                  "description": "The map of discriminators to definitions.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "\\$\\{[\\s\\S]+?\\}": {}
          }
        }
      }
    },
    "content": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Content",
      "description": "The value of a content.",
      "type": "object",
      "oneOf": [
        {
          "title": "Value definition",
          "description": "Defines the data type and value.",
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "title": "Data type",
              "description": "The data type of the resolved value.",
              "type": "string",
              "const": "boolean"
            },
            "value": {
              "anyOf": [
                {
                  "title": "Value",
                  "description": "Defines how to resolve the value.",
                  "type": "object",
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "type",
                        "value"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "const": "static"
                        },
                        "value": {
                          "anyOf": [
                            {
                              "title": "Static value",
                              "description": "The resolved value.",
                              "type": "boolean"
                            },
                            {
                              "title": "Static value",
                              "description": "The resolved value.",
                              "type": "string",
                              "$ref": "#/$defs/dynamic-value"
                            }
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "patternProperties": {
                        "\\$\\{[\\s\\S]+?\\}": {}
                      }
                    },
                    {
                      "type": "object",
                      "if": {
                        "required": [
                          "nullable"
                        ],
                        "properties": {
                          "nullable": {
                            "type": "boolean",
                            "const": true
                          }
                        }
                      },
                      "then": {
                        "required": [
                          "type",
                          "nullable",
                          "expression"
                        ]
                      },
                      "else": {
                        "required": [
                          "type",
                          "expression",
                          "default"
                        ]
                      },
                      "required": [
                        "type",
                        "expression"
                      ],
                      "properties": {
                        "default": {
                          "anyOf": [
                            {
                              "title": "Default",
                              "description": "A static value used in case the expression evaluation fails, results in null, or yields a value of unexpected type.",
                              "type": "boolean"
                            },
                            {
                              "title": "Default",
                              "description": "A static value used in case the expression evaluation fails, results in null, or yields a value of unexpected type.",
                              "type": "string",
                              "$ref": "#/$defs/dynamic-value"
                            }
                          ]
                        },
                        "type": {
                          "type": "string",
                          "const": "dynamic"
                        },
                        "expression": {
                          "title": "Expression",
                          "description": "A CQL expression that resolves to the value.",
                          "type": "string"
                        },
                        "nullable": {
                          "anyOf": [
                            {
                              "title": "Nullable?",
                              "description": "Whether the expression result is nullable.",
                              "type": "boolean"
                            },
                            {
                              "title": "Nullable?",
                              "description": "Whether the expression result is nullable.",
                              "type": "string",
                              "$ref": "#/$defs/dynamic-value"
                            }
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "patternProperties": {
                        "\\$\\{[\\s\\S]+?\\}": {}
                      }
                    }
                  ],
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "title": "Value type",
                      "description": "Defines whether the value is static or dynamically resolved at runtime.",
                      "type": "string"
                    }
                  }
                },
                {
                  "title": "Value",
                  "description": "Defines how to resolve the value.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "\\$\\{[\\s\\S]+?\\}": {}
          }
        },
        {
          "title": "Value definition",
          "description": "Defines the data type and value.",
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "title": "Data type",
              "description": "The data type of the resolved value.",
              "type": "string",
              "const": "text"
            },
            "value": {
              "anyOf": [
                {
                  "title": "Value",
                  "description": "Defines how to resolve the value.",
                  "type": "object",
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "type",
                        "value"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "const": "static"
                        },
                        "value": {
                          "title": "Static value",
                          "description": "The resolved value.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "patternProperties": {
                        "\\$\\{[\\s\\S]+?\\}": {}
                      }
                    },
                    {
                      "type": "object",
                      "if": {
                        "required": [
                          "nullable"
                        ],
                        "properties": {
                          "nullable": {
                            "type": "boolean",
                            "const": true
                          }
                        }
                      },
                      "then": {
                        "required": [
                          "type",
                          "nullable",
                          "expression"
                        ]
                      },
                      "else": {
                        "required": [
                          "type",
                          "expression",
                          "default"
                        ]
                      },
                      "required": [
                        "type",
                        "expression"
                      ],
                      "properties": {
                        "default": {
                          "title": "Default",
                          "description": "A static value used in case the expression evaluation fails, results in null, or yields a value of unexpected type.",
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "const": "dynamic"
                        },
                        "expression": {
                          "title": "Expression",
                          "description": "A CQL expression that resolves to the value.",
                          "type": "string"
                        },
                        "nullable": {
                          "anyOf": [
                            {
                              "title": "Nullable?",
                              "description": "Whether the expression result is nullable.",
                              "type": "boolean"
                            },
                            {
                              "title": "Nullable?",
                              "description": "Whether the expression result is nullable.",
                              "type": "string",
                              "$ref": "#/$defs/dynamic-value"
                            }
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "patternProperties": {
                        "\\$\\{[\\s\\S]+?\\}": {}
                      }
                    }
                  ],
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "title": "Value type",
                      "description": "Defines whether the value is static or dynamically resolved at runtime.",
                      "type": "string"
                    }
                  }
                },
                {
                  "title": "Value",
                  "description": "Defines how to resolve the value.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "\\$\\{[\\s\\S]+?\\}": {}
          }
        },
        {
          "title": "Value definition",
          "description": "Defines the data type and value.",
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "title": "Data type",
              "description": "The data type of the resolved value.",
              "type": "string",
              "const": "number"
            },
            "value": {
              "anyOf": [
                {
                  "title": "Value",
                  "description": "Defines how to resolve the value.",
                  "type": "object",
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "type",
                        "value"
                      ],
                      "properties": {
                        "type": {
                          "const": "static"
                        },
                        "value": {
                          "anyOf": [
                            {
                              "title": "Static value",
                              "description": "The resolved value.",
                              "type": "number",
                              "maximum": 9007199254740991,
                              "minimum": -9007199254740991
                            },
                            {
                              "title": "Static value",
                              "description": "The resolved value.",
                              "type": "string",
                              "$ref": "#/$defs/dynamic-value"
                            }
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "patternProperties": {
                        "\\$\\{[\\s\\S]+?\\}": {}
                      }
                    },
                    {
                      "type": "object",
                      "if": {
                        "required": [
                          "type",
                          "nullable"
                        ],
                        "properties": {
                          "nullable": {
                            "type": "boolean",
                            "const": true
                          }
                        }
                      },
                      "then": {
                        "required": [
                          "type",
                          "nullable",
                          "expression"
                        ]
                      },
                      "else": {
                        "required": [
                          "type",
                          "expression",
                          "default"
                        ]
                      },
                      "required": [
                        "type",
                        "expression"
                      ],
                      "properties": {
                        "default": {
                          "anyOf": [
                            {
                              "title": "Default",
                              "description": "A static value used in case the expression evaluation fails, results in null, or yields a value of unexpected type.",
                              "type": "number",
                              "maximum": 9007199254740991,
                              "minimum": -9007199254740991
                            },
                            {
                              "title": "Default",
                              "description": "A static value used in case the expression evaluation fails, results in null, or yields a value of unexpected type.",
                              "type": "string",
                              "$ref": "#/$defs/dynamic-value"
                            }
                          ]
                        },
                        "type": {
                          "type": "string",
                          "const": "dynamic"
                        },
                        "expression": {
                          "title": "Expression",
                          "description": "A CQL expression that resolves to the value.",
                          "type": "string"
                        },
                        "nullable": {
                          "anyOf": [
                            {
                              "title": "Nullable?",
                              "description": "Whether the expression result is nullable.",
                              "type": "boolean"
                            },
                            {
                              "title": "Nullable?",
                              "description": "Whether the expression result is nullable.",
                              "type": "string",
                              "$ref": "#/$defs/dynamic-value"
                            }
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "patternProperties": {
                        "\\$\\{[\\s\\S]+?\\}": {}
                      }
                    }
                  ],
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "title": "Value type",
                      "description": "Defines whether the value is static or dynamically resolved at runtime.",
                      "type": "string"
                    }
                  }
                },
                {
                  "title": "Value",
                  "description": "Defines how to resolve the value.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "\\$\\{[\\s\\S]+?\\}": {}
          }
        },
        {
          "title": "Structure",
          "description": "A set of attributes as key-value pairs.",
          "type": "object",
          "required": [
            "type",
            "attributes"
          ],
          "properties": {
            "type": {
              "const": "structure"
            },
            "attributes": {
              "anyOf": [
                {
                  "title": "Attributes",
                  "description": "The structure-specific attributes.",
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "$ref": "#/$defs/content"
                      },
                      {
                        "type": "string",
                        "$ref": "#/$defs/dynamic-value"
                      }
                    ]
                  }
                },
                {
                  "title": "Attributes",
                  "description": "The structure-specific attributes.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            },
            "name": {
              "title": "Structure name",
              "description": "The name of the structure in a union.",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "\\$\\{[\\s\\S]+?\\}": {}
          }
        },
        {
          "title": "List",
          "description": "A set of attributes",
          "type": "object",
          "required": [
            "type",
            "items"
          ],
          "properties": {
            "type": {
              "type": "string",
              "const": "list"
            },
            "items": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/$defs/content"
                      },
                      {
                        "type": "string",
                        "$ref": "#/$defs/dynamic-value"
                      }
                    ]
                  }
                },
                {
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "\\$\\{[\\s\\S]+?\\}": {}
          }
        }
      ],
      "properties": {
        "$schema": {
          "description": "The JSON schema reference for this content.",
          "type": "string"
        },
        "type": {
          "description": "The data type of the value.",
          "type": "string"
        }
      }
    },
    "template-action": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Action",
      "description": "An instruction that tells the template what to do, like writing to the console or creating a file.",
      "type": "object",
      "oneOf": [
        {
          "$ref": "#/$defs/template-action-add-component"
        },
        {
          "$ref": "#/$defs/template-action-add-dependency"
        },
        {
          "$ref": "#/$defs/template-action-add-slot"
        },
        {
          "$ref": "#/$defs/template-action-change-directory"
        },
        {
          "$ref": "#/$defs/template-action-check-dependency"
        },
        {
          "$ref": "#/$defs/template-action-create-resource"
        },
        {
          "$ref": "#/$defs/template-action-define"
        },
        {
          "$ref": "#/$defs/template-action-download"
        },
        {
          "$ref": "#/$defs/template-action-execute-package"
        },
        {
          "$ref": "#/$defs/template-action-fail"
        },
        {
          "$ref": "#/$defs/template-action-format-code"
        },
        {
          "$ref": "#/$defs/template-action-import"
        },
        {
          "$ref": "#/$defs/template-action-locate-file"
        },
        {
          "$ref": "#/$defs/template-action-initialize"
        },
        {
          "$ref": "#/$defs/template-action-open-link"
        },
        {
          "$ref": "#/$defs/template-action-print"
        },
        {
          "$ref": "#/$defs/template-action-prompt"
        },
        {
          "$ref": "#/$defs/template-action-repeat"
        },
        {
          "$ref": "#/$defs/template-action-replace-file-content"
        },
        {
          "$ref": "#/$defs/template-action-run"
        },
        {
          "$ref": "#/$defs/template-action-start-server"
        },
        {
          "$ref": "#/$defs/template-action-stop-server"
        },
        {
          "$ref": "#/$defs/template-action-test"
        },
        {
          "$ref": "#/$defs/template-action-try"
        }
      ]
    },
    "template-action-add-component": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Add component",
      "description": "Adds a component to the project.",
      "examples": [
        {
          "components": [
            "button"
          ],
          "name": "add-component"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "components"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "components": {
          "anyOf": [
            {
              "description": "The components to add to the project.",
              "examples": [
                "button",
                "button@2",
                "button@1-2",
                "button@1,3"
              ],
              "type": "array",
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "description": "The name of the component to add optionally followed by a version constraint.",
                    "type": "string",
                    "pattern": "^[a-z-A-Z]+(-?[a-z-A-Z0-9]+)*(@[0-9]+((\\s*,\\s*[0-9]+)+|(\\s*-\\s*[0-9]+))?)?$",
                    "minLength": 1
                  },
                  {
                    "description": "The name of the component to add optionally followed by a version constraint.",
                    "type": "string",
                    "$ref": "#/$defs/dynamic-string"
                  }
                ]
              }
            },
            {
              "description": "The components to add to the project.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "name": {
          "description": "Tha name of the action.",
          "type": "string",
          "const": "add-component"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-add-dependency": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Add dependency",
      "description": "Adds dependencies to the project.",
      "examples": [
        {
          "dependencies": [
            "croct"
          ],
          "development": true,
          "name": "add-dependency"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "dependencies"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "dependencies": {
          "anyOf": [
            {
              "description": "The dependencies to add to the project.",
              "examples": [
                "croct",
                "croct@2"
              ],
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "The name of the dependency to add.",
                "type": "string",
                "minLength": 1
              }
            },
            {
              "description": "The dependencies to add to the project.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "development": {
          "anyOf": [
            {
              "description": "Whether the dependencies should be added as development dependencies.",
              "default": false,
              "type": "boolean"
            },
            {
              "description": "Whether the dependencies should be added as development dependencies.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "add-dependency"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-add-slot": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Add slot",
      "description": "Adds a slot to the project.",
      "examples": [
        {
          "example": true,
          "name": "add-slot",
          "slots": [
            "home-hero"
          ]
        }
      ],
      "type": "object",
      "required": [
        "name",
        "slots"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "example": {
          "anyOf": [
            {
              "description": "Whether to generate a code example for the slot.",
              "default": false,
              "type": "boolean"
            },
            {
              "description": "Whether to generate a code example for the slot.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "name": {
          "description": "Tha name of the action.",
          "type": "string",
          "const": "add-slot"
        },
        "slots": {
          "anyOf": [
            {
              "description": "The slots to add to the project.",
              "examples": [
                "home-hero",
                "home-hero@2",
                "home-hero@1-2",
                "home-hero@1,3"
              ],
              "type": "array",
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "description": "The name of the slot to add optionally followed by a version constraint.",
                    "type": "string",
                    "pattern": "^[a-z-A-Z]+(-?[a-z-A-Z0-9]+)*(@[0-9]+((\\s*,\\s*[0-9]+)+|(\\s*-\\s*[0-9]+))?)?$",
                    "minLength": 1
                  },
                  {
                    "description": "The name of the slot to add optionally followed by a version constraint.",
                    "type": "string",
                    "$ref": "#/$defs/dynamic-string"
                  }
                ]
              }
            },
            {
              "description": "The slots to add to the project.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-change-directory": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Change directory",
      "description": "Changes the working directory.",
      "examples": [
        {
          "name": "change-directory",
          "path": "./src"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "path"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "change-directory"
        },
        "path": {
          "description": "The path to the new working directory.",
          "type": "string",
          "minLength": 1
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-check-dependency": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Check dependency",
      "description": "Checks if specific dependencies are installed and optionally stores the result in variables.",
      "type": "object",
      "required": [
        "name",
        "dependencies"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "dependencies": {
          "anyOf": [
            {
              "description": "The list of dependencies to check.",
              "type": "array",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "anyOf": [
                  {
                    "description": "A dependency to check.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "optional": {
                        "anyOf": [
                          {
                            "description": "Whether the dependency is optional. Optional dependencies do not cause the action to fail even if not satisfied.",
                            "default": false,
                            "type": "boolean"
                          },
                          {
                            "description": "Whether the dependency is optional. Optional dependencies do not cause the action to fail even if not satisfied.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      },
                      "name": {
                        "description": "The name of the dependency.",
                        "examples": [
                          "croct",
                          "react"
                        ],
                        "type": "string",
                        "minLength": 1
                      },
                      "version": {
                        "description": "The required version of the dependency. If not specified, any version is accepted.",
                        "examples": [
                          "1.0.0",
                          "^1.0.0",
                          ">=2.0.0"
                        ],
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "patternProperties": {
                      "\\$\\{[\\s\\S]+?\\}": {}
                    }
                  },
                  {
                    "description": "A dependency to check.",
                    "type": "string",
                    "$ref": "#/$defs/dynamic-value"
                  }
                ]
              }
            },
            {
              "description": "The list of dependencies to check.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "help": {
          "anyOf": [
            {
              "description": "Help message and resources to guide resolution.",
              "$ref": "#/$defs/template-help",
              "type": "object",
              "unevaluatedProperties": false
            },
            {
              "description": "Help message and resources to guide resolution.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "check-dependency"
        },
        "result": {
          "anyOf": [
            {
              "description": "Maps each dependency to a variable that stores whether it's satisfied. Listed dependencies do not fail the action.",
              "type": "object",
              "propertyNames": {
                "description": "The name of the dependency.",
                "examples": [
                  "croct",
                  "react"
                ],
                "type": "string",
                "minLength": 1
              },
              "additionalProperties": {
                "description": "The variable name to store the result of the dependency check.",
                "examples": [
                  "variable",
                  "result"
                ],
                "type": "string",
                "minLength": 1
              }
            },
            {
              "description": "Maps each dependency to a variable that stores whether it's satisfied. Listed dependencies do not fail the action.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-create-resource": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Create resource",
      "description": "Creates resources such as audiences, components, slots, and experiences.",
      "examples": [
        {
          "name": "create-resource",
          "resources": {
            "audiences": {
              "logged-in-users": {
                "criteria": "user is identified",
                "name": "Logged-in users"
              }
            }
          }
        }
      ],
      "type": "object",
      "required": [
        "name",
        "resources"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "create-resource"
        },
        "resources": {
          "anyOf": [
            {
              "description": "The content resources to create.",
              "type": "object",
              "minProperties": 1,
              "properties": {
                "audiences": {
                  "anyOf": [
                    {
                      "description": "A map of audience IDs to audience definitions.",
                      "type": "object",
                      "minProperties": 1,
                      "propertyNames": {
                        "anyOf": [
                          {
                            "description": "The ID of the audience.",
                            "examples": [
                              "logged-in-users",
                              "premium-users"
                            ],
                            "type": "string",
                            "pattern": "^[a-z-A-Z]+(-?[a-z-A-Z0-9]+)*$",
                            "minLength": 1
                          },
                          {
                            "description": "The ID of the audience.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-string"
                          }
                        ]
                      },
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "object",
                            "required": [
                              "name",
                              "criteria"
                            ],
                            "properties": {
                              "criteria": {
                                "description": "The criteria used to match the audience in CQL. Read more at https://docs.croct.com/reference/cql/introduction.",
                                "examples": [
                                  "user is identified",
                                  "user's plan is premium"
                                ],
                                "type": "string",
                                "minLength": 1
                              },
                              "name": {
                                "description": "The name of the audience.",
                                "examples": [
                                  "Logged in users",
                                  "Premium users"
                                ],
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "patternProperties": {
                              "\\$\\{[\\s\\S]+?\\}": {}
                            }
                          },
                          {
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      }
                    },
                    {
                      "description": "A map of audience IDs to audience definitions.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                },
                "components": {
                  "anyOf": [
                    {
                      "description": "A map of component IDs to component definitions.",
                      "type": "object",
                      "minProperties": 1,
                      "propertyNames": {
                        "anyOf": [
                          {
                            "description": "The ID of the component.",
                            "examples": [
                              "button",
                              "thumbnail"
                            ],
                            "type": "string",
                            "pattern": "^[a-z-A-Z]+(-?[a-z-A-Z0-9]+)*$",
                            "minLength": 1
                          },
                          {
                            "description": "The ID of the component.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-string"
                          }
                        ]
                      },
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "object",
                            "required": [
                              "name",
                              "schema"
                            ],
                            "properties": {
                              "description": {
                                "description": "The description of the component.",
                                "examples": [
                                  "A button component.",
                                  "An image component."
                                ],
                                "type": "string",
                                "minLength": 1
                              },
                              "name": {
                                "description": "The name of the component.",
                                "examples": [
                                  "Button",
                                  "Thumbnail"
                                ],
                                "type": "string",
                                "minLength": 1
                              },
                              "schema": {
                                "anyOf": [
                                  {
                                    "description": "The component schema.",
                                    "$ref": "#/$defs/content-schema",
                                    "type": "object"
                                  },
                                  {
                                    "description": "The component schema.",
                                    "type": "string",
                                    "$ref": "#/$defs/dynamic-value"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "patternProperties": {
                              "\\$\\{[\\s\\S]+?\\}": {}
                            }
                          },
                          {
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      }
                    },
                    {
                      "description": "A map of component IDs to component definitions.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                },
                "experiences": {
                  "anyOf": [
                    {
                      "description": "The list of experiences to create.",
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "required": [
                              "name",
                              "audiences",
                              "slots",
                              "content"
                            ],
                            "properties": {
                              "audiences": {
                                "anyOf": [
                                  {
                                    "description": "The list of audiences to target.",
                                    "type": "array",
                                    "items": {
                                      "anyOf": [
                                        {
                                          "description": "The ID of the audience which the experience is targeted to.",
                                          "examples": [
                                            "logged-in-users",
                                            "premium-users"
                                          ],
                                          "type": "string",
                                          "pattern": "^[a-z-A-Z]+(-?[a-z-A-Z0-9]+)*$",
                                          "minLength": 1
                                        },
                                        {
                                          "description": "The ID of the audience which the experience is targeted to.",
                                          "type": "string",
                                          "$ref": "#/$defs/dynamic-string"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "description": "The list of audiences to target.",
                                    "type": "string",
                                    "$ref": "#/$defs/dynamic-value"
                                  }
                                ]
                              },
                              "content": {
                                "anyOf": [
                                  {
                                    "description": "The content for the experience.",
                                    "$ref": "#/$defs/template-action-create-resource/$defs/personalized-content",
                                    "type": "object"
                                  },
                                  {
                                    "description": "The content for the experience.",
                                    "type": "string",
                                    "$ref": "#/$defs/dynamic-value"
                                  }
                                ]
                              },
                              "draft": {
                                "anyOf": [
                                  {
                                    "description": "Whether the experience is a draft. Draft experiences can be partially configured.",
                                    "default": false,
                                    "type": "boolean"
                                  },
                                  {
                                    "description": "Whether the experience is a draft. Draft experiences can be partially configured.",
                                    "type": "string",
                                    "$ref": "#/$defs/dynamic-value"
                                  }
                                ]
                              },
                              "experiment": {
                                "anyOf": [
                                  {
                                    "description": "The configuration of the experiment.",
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "traffic",
                                      "variants"
                                    ],
                                    "properties": {
                                      "crossDevice": {
                                        "anyOf": [
                                          {
                                            "description": "Whether the experiment should be tracked across devices.",
                                            "default": false,
                                            "type": "boolean"
                                          },
                                          {
                                            "description": "Whether the experiment should be tracked across devices.",
                                            "type": "string",
                                            "$ref": "#/$defs/dynamic-value"
                                          }
                                        ]
                                      },
                                      "goalId": {
                                        "anyOf": [
                                          {
                                            "description": "The ID of the goal to measure the experiment.",
                                            "examples": [
                                              "login",
                                              "purchase"
                                            ],
                                            "type": "string",
                                            "pattern": "^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$",
                                            "minLength": 1
                                          },
                                          {
                                            "description": "The ID of the goal to measure the experiment.",
                                            "type": "string",
                                            "$ref": "#/$defs/dynamic-string"
                                          }
                                        ]
                                      },
                                      "name": {
                                        "description": "The name of the experiment.",
                                        "examples": [
                                          "Login page experiment",
                                          "Pricing experiment"
                                        ],
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "traffic": {
                                        "anyOf": [
                                          {
                                            "description": "The percentage of traffic to allocate to the experiment, where 1 means 100%.",
                                            "type": "number",
                                            "maximum": 1,
                                            "minimum": 0
                                          },
                                          {
                                            "description": "The percentage of traffic to allocate to the experiment, where 1 means 100%.",
                                            "type": "string",
                                            "$ref": "#/$defs/dynamic-value"
                                          }
                                        ]
                                      },
                                      "variants": {
                                        "anyOf": [
                                          {
                                            "description": "The list of variants to experiment with.",
                                            "type": "array",
                                            "minItems": 2,
                                            "items": {
                                              "anyOf": [
                                                {
                                                  "type": "object",
                                                  "required": [
                                                    "name",
                                                    "content",
                                                    "allocation"
                                                  ],
                                                  "properties": {
                                                    "allocation": {
                                                      "anyOf": [
                                                        {
                                                          "description": "Relative traffic ratio between variants. For example, 2 and 1 gives one variant twice the traffic of the other.",
                                                          "type": "number",
                                                          "minimum": 0
                                                        },
                                                        {
                                                          "description": "Relative traffic ratio between variants. For example, 2 and 1 gives one variant twice the traffic of the other.",
                                                          "type": "string",
                                                          "$ref": "#/$defs/dynamic-value"
                                                        }
                                                      ]
                                                    },
                                                    "baseline": {
                                                      "anyOf": [
                                                        {
                                                          "description": "Whether the variant is the baseline.",
                                                          "default": false,
                                                          "type": "boolean"
                                                        },
                                                        {
                                                          "description": "Whether the variant is the baseline.",
                                                          "type": "string",
                                                          "$ref": "#/$defs/dynamic-value"
                                                        }
                                                      ]
                                                    },
                                                    "content": {
                                                      "anyOf": [
                                                        {
                                                          "description": "The content for the variant.",
                                                          "$ref": "#/$defs/template-action-create-resource/$defs/personalized-content",
                                                          "type": "object"
                                                        },
                                                        {
                                                          "description": "The content for the variant.",
                                                          "type": "string",
                                                          "$ref": "#/$defs/dynamic-value"
                                                        }
                                                      ]
                                                    },
                                                    "name": {
                                                      "description": "The name of the variant.",
                                                      "examples": [
                                                        "Variant A",
                                                        "Variant B"
                                                      ],
                                                      "type": "string",
                                                      "minLength": 1
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "patternProperties": {
                                                    "\\$\\{[\\s\\S]+?\\}": {}
                                                  }
                                                },
                                                {
                                                  "type": "string",
                                                  "$ref": "#/$defs/dynamic-value"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "description": "The list of variants to experiment with.",
                                            "type": "string",
                                            "$ref": "#/$defs/dynamic-value"
                                          }
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "patternProperties": {
                                      "\\$\\{[\\s\\S]+?\\}": {}
                                    }
                                  },
                                  {
                                    "description": "The configuration of the experiment.",
                                    "type": "string",
                                    "$ref": "#/$defs/dynamic-value"
                                  }
                                ]
                              },
                              "name": {
                                "description": "The name of the experience.",
                                "examples": [
                                  "Experience for logged-in users",
                                  "Experience for premium users"
                                ],
                                "type": "string",
                                "minLength": 1
                              },
                              "slots": {
                                "anyOf": [
                                  {
                                    "description": "The list of slots to personalize.",
                                    "type": "array",
                                    "items": {
                                      "anyOf": [
                                        {
                                          "description": "The ID of the slot to personalize.",
                                          "examples": [
                                            "home-hero",
                                            "pricing-table"
                                          ],
                                          "type": "string",
                                          "pattern": "^[a-z-A-Z]+(-?[a-z-A-Z0-9]+)*$",
                                          "minLength": 1
                                        },
                                        {
                                          "description": "The ID of the slot to personalize.",
                                          "type": "string",
                                          "$ref": "#/$defs/dynamic-string"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "description": "The list of slots to personalize.",
                                    "type": "string",
                                    "$ref": "#/$defs/dynamic-value"
                                  }
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "patternProperties": {
                              "\\$\\{[\\s\\S]+?\\}": {}
                            }
                          },
                          {
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      }
                    },
                    {
                      "description": "The list of experiences to create.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                },
                "slots": {
                  "anyOf": [
                    {
                      "description": "A map of slot IDs to slot definitions.",
                      "type": "object",
                      "minProperties": 1,
                      "propertyNames": {
                        "anyOf": [
                          {
                            "description": "The ID of the slot.",
                            "examples": [
                              "home-hero",
                              "pricing-table"
                            ],
                            "type": "string",
                            "pattern": "^[a-z-A-Z]+(-?[a-z-A-Z0-9]+)*$",
                            "minLength": 1
                          },
                          {
                            "description": "The ID of the slot.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-string"
                          }
                        ]
                      },
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "object",
                            "required": [
                              "name",
                              "component",
                              "content"
                            ],
                            "properties": {
                              "component": {
                                "anyOf": [
                                  {
                                    "description": "The name of the component to use in the slot.",
                                    "examples": [
                                      "button",
                                      "thumbnail"
                                    ],
                                    "type": "string",
                                    "pattern": "^[a-z-A-Z]+(-?[a-z-A-Z0-9]+)*$",
                                    "minLength": 1
                                  },
                                  {
                                    "description": "The name of the component to use in the slot.",
                                    "type": "string",
                                    "$ref": "#/$defs/dynamic-string"
                                  }
                                ]
                              },
                              "content": {
                                "anyOf": [
                                  {
                                    "description": "The content for the slot.",
                                    "$ref": "#/$defs/template-action-create-resource/$defs/localized-content",
                                    "type": "object"
                                  },
                                  {
                                    "description": "The content for the slot.",
                                    "type": "string",
                                    "$ref": "#/$defs/dynamic-value"
                                  }
                                ]
                              },
                              "name": {
                                "description": "The name of the slot.",
                                "examples": [
                                  "Home hero",
                                  "Pricing table"
                                ],
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "patternProperties": {
                              "\\$\\{[\\s\\S]+?\\}": {}
                            }
                          },
                          {
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      }
                    },
                    {
                      "description": "A map of slot IDs to slot definitions.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "\\$\\{[\\s\\S]+?\\}": {}
              }
            },
            {
              "description": "The content resources to create.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "result": {
          "anyOf": [
            {
              "description": "A map of variables to store the resulting resource identifiers.",
              "type": "object",
              "properties": {
                "audiences": {
                  "anyOf": [
                    {
                      "description": "A map of audience names to variable names.",
                      "type": "object",
                      "propertyNames": {
                        "anyOf": [
                          {
                            "description": "The ID of the audience.",
                            "examples": [
                              "logged-in-users",
                              "premium-users"
                            ],
                            "type": "string",
                            "pattern": "^[a-z-A-Z]+(-?[a-z-A-Z0-9]+)*$",
                            "minLength": 1
                          },
                          {
                            "description": "The ID of the audience.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-string"
                          }
                        ]
                      },
                      "additionalProperties": {
                        "description": "The variable name to store the audience ID.",
                        "examples": [
                          "loggedInUsersAudience",
                          "premiumUsersAudience"
                        ],
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    {
                      "description": "A map of audience names to variable names.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                },
                "components": {
                  "anyOf": [
                    {
                      "description": "A map of component names to variables storing their IDs and versions.",
                      "type": "object",
                      "propertyNames": {
                        "anyOf": [
                          {
                            "description": "The ID of the component specified in the input.",
                            "examples": [
                              "button",
                              "thumbnail"
                            ],
                            "type": "string",
                            "pattern": "^[a-z-A-Z]+(-?[a-z-A-Z0-9]+)*$",
                            "minLength": 1
                          },
                          {
                            "description": "The ID of the component specified in the input.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-string"
                          }
                        ]
                      },
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The resolved component ID, may differ from input if already exists.",
                                "examples": [
                                  "buttonId",
                                  "thumbnailId"
                                ],
                                "type": "string",
                                "minLength": 1
                              },
                              "version": {
                                "description": "The component version, may not be 1 if already exists.",
                                "examples": [
                                  "buttonVersion",
                                  "thumbnailVersion"
                                ],
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "patternProperties": {
                              "\\$\\{[\\s\\S]+?\\}": {}
                            }
                          },
                          {
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      }
                    },
                    {
                      "description": "A map of component names to variables storing their IDs and versions.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                },
                "experiences": {
                  "anyOf": [
                    {
                      "description": "A map of experience indexes to variable names.",
                      "type": "object",
                      "propertyNames": {
                        "anyOf": [
                          {
                            "description": "The index of the experience in the list.",
                            "examples": [
                              "0",
                              "1"
                            ],
                            "type": "string",
                            "pattern": "^[0-9]+$",
                            "minLength": 1
                          },
                          {
                            "description": "The index of the experience in the list.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-string"
                          }
                        ]
                      },
                      "additionalProperties": {
                        "description": "The variable name to store the experience ID.",
                        "examples": [
                          "loggedInUsersExperienceId",
                          "premiumUsersExperienceId"
                        ],
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    {
                      "description": "A map of experience indexes to variable names.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                },
                "experiments": {
                  "anyOf": [
                    {
                      "description": "A map of experiment indexes to variable names.",
                      "type": "object",
                      "propertyNames": {
                        "anyOf": [
                          {
                            "description": "The index of the experiment in the list.",
                            "examples": [
                              0,
                              1
                            ],
                            "type": "string",
                            "pattern": "^[0-9]+$",
                            "minLength": 1
                          },
                          {
                            "description": "The index of the experiment in the list.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-string"
                          }
                        ]
                      },
                      "additionalProperties": {
                        "description": "The variable name to store the experiment ID.",
                        "examples": [
                          "pricingExperimentId",
                          "loginPageExperimentId"
                        ],
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    {
                      "description": "A map of experiment indexes to variable names.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                },
                "slots": {
                  "anyOf": [
                    {
                      "description": "A map of slot names to variables storing their IDs and versions.",
                      "type": "object",
                      "propertyNames": {
                        "anyOf": [
                          {
                            "description": "The ID of the slot specified in the input.",
                            "examples": [
                              "home-hero",
                              "pricing-table"
                            ],
                            "type": "string",
                            "pattern": "^[a-z-A-Z]+(-?[a-z-A-Z0-9]+)*$",
                            "minLength": 1
                          },
                          {
                            "description": "The ID of the slot specified in the input.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-string"
                          }
                        ]
                      },
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The resolved slot ID, may differ from input if already exists.",
                                "examples": [
                                  "homeHeroId",
                                  "pricingTableId"
                                ],
                                "type": "string",
                                "minLength": 1
                              },
                              "version": {
                                "description": "The slot version, may not be 1 if already exists.",
                                "examples": [
                                  "homeHeroVersion",
                                  "pricingTableVersion"
                                ],
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "patternProperties": {
                              "\\$\\{[\\s\\S]+?\\}": {}
                            }
                          },
                          {
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      }
                    },
                    {
                      "description": "A map of slot names to variables storing their IDs and versions.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "\\$\\{[\\s\\S]+?\\}": {}
              }
            },
            {
              "description": "A map of variables to store the resulting resource identifiers.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        }
      },
      "additionalProperties": false,
      "$defs": {
        "localized-content": {
          "description": "The map of locale to content.",
          "type": "object",
          "minProperties": 1,
          "propertyNames": {
            "anyOf": [
              {
                "description": "The locale of the content.",
                "examples": [
                  "en",
                  "en-us",
                  "es-es"
                ],
                "type": "string",
                "pattern": "^[a-zA-Z]{2,3}([-_][a-zA-Z]{2,3})?$",
                "minLength": 1
              },
              {
                "description": "The locale of the content.",
                "type": "string",
                "$ref": "#/$defs/dynamic-string"
              }
            ]
          },
          "additionalProperties": {
            "anyOf": [
              {
                "description": "The locale-specific content.",
                "$ref": "#/$defs/content",
                "type": "object"
              },
              {
                "description": "The locale-specific content.",
                "type": "string",
                "$ref": "#/$defs/dynamic-value"
              }
            ]
          }
        },
        "personalized-content": {
          "type": "object",
          "required": [
            "default"
          ],
          "properties": {
            "default": {
              "anyOf": [
                {
                  "description": "The default content when no segmented content is provided.",
                  "$ref": "#/$defs/template-action-create-resource/$defs/slot-content-map",
                  "type": "object"
                },
                {
                  "description": "The default content when no segmented content is provided.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            },
            "segmented": {
              "anyOf": [
                {
                  "description": "The list of segmented content for the variant.",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "type": "object",
                        "required": [
                          "audiences",
                          "content"
                        ],
                        "properties": {
                          "audiences": {
                            "anyOf": [
                              {
                                "description": "The audiences for which the content is targeted.",
                                "type": "array",
                                "minItems": 1,
                                "uniqueItems": true,
                                "items": {
                                  "anyOf": [
                                    {
                                      "description": "The ID of the audience.",
                                      "examples": [
                                        "logged-in-users",
                                        "premium-users"
                                      ],
                                      "type": "string",
                                      "pattern": "^[a-z-A-Z]+(-?[a-z-A-Z0-9]+)*$",
                                      "minLength": 1
                                    },
                                    {
                                      "description": "The ID of the audience.",
                                      "type": "string",
                                      "$ref": "#/$defs/dynamic-string"
                                    }
                                  ]
                                }
                              },
                              {
                                "description": "The audiences for which the content is targeted.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          },
                          "content": {
                            "anyOf": [
                              {
                                "description": "The content for the audience group.",
                                "$ref": "#/$defs/template-action-create-resource/$defs/slot-content-map",
                                "type": "object"
                              },
                              {
                                "description": "The content for the audience group.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "patternProperties": {
                          "\\$\\{[\\s\\S]+?\\}": {}
                        }
                      },
                      {
                        "type": "string",
                        "$ref": "#/$defs/dynamic-value"
                      }
                    ]
                  }
                },
                {
                  "description": "The list of segmented content for the variant.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            }
          }
        },
        "slot-content-map": {
          "description": "The map of slot IDs to their content.",
          "type": "object",
          "minProperties": 1,
          "propertyNames": {
            "anyOf": [
              {
                "description": "The ID of the slot.",
                "examples": [
                  "home-hero",
                  "pricing-table"
                ],
                "type": "string",
                "pattern": "^[a-z-A-Z]+(-?[a-z-A-Z0-9]+)*$",
                "minLength": 1
              },
              {
                "description": "The ID of the slot.",
                "type": "string",
                "$ref": "#/$defs/dynamic-string"
              }
            ]
          },
          "additionalProperties": {
            "anyOf": [
              {
                "description": "The locale-specific content.",
                "$ref": "#/$defs/template-action-create-resource/$defs/localized-content",
                "type": "object"
              },
              {
                "description": "The locale-specific content.",
                "type": "string",
                "$ref": "#/$defs/dynamic-value"
              }
            ]
          }
        }
      },
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-define": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Define variables",
      "description": "Defines variables to be used in the template.",
      "examples": [
        {
          "name": "define",
          "variables": {
            "projectName": "My Project"
          }
        }
      ],
      "type": "object",
      "required": [
        "name",
        "variables"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "define"
        },
        "variables": {
          "anyOf": [
            {
              "description": "A map of variable names to their values. Values can be any valid JSON type.",
              "type": "object",
              "minProperties": 1,
              "propertyNames": {
                "description": "The name of the variable",
                "type": "string",
                "minLength": 1
              },
              "additionalProperties": true
            },
            {
              "description": "A map of variable names to their values. Values can be any valid JSON type.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-download": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Download files",
      "description": "Downloads files from a remote source into a local directory.",
      "examples": [
        {
          "destination": "./assets",
          "filter": "*.json",
          "name": "download",
          "result": {
            "destination": "downloadPath"
          },
          "source": "https://example.com/assets/file.json"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "source",
        "destination"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "destination": {
          "description": "The local path where files are downloaded to.",
          "examples": [
            "public/assets",
            "tmp/data"
          ],
          "type": "string",
          "minLength": 1
        },
        "filter": {
          "description": "A glob pattern to filter the files to download.",
          "examples": [
            "*.json",
            "*/**/*.js"
          ],
          "type": "string",
          "minLength": 1
        },
        "mapping": {
          "anyOf": [
            {
              "description": "A mapping of original paths to target paths.",
              "type": "object",
              "propertyNames": {
                "description": "The original path.",
                "type": "string",
                "minLength": 1
              },
              "additionalProperties": {
                "description": "The target path.",
                "type": "string",
                "minLength": 1
              }
            },
            {
              "description": "A mapping of original paths to target paths.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "download"
        },
        "overwrite": {
          "anyOf": [
            {
              "description": "Whether to overwrite existing files or directories if the destination already exists.",
              "default": false,
              "type": "boolean"
            },
            {
              "description": "Whether to overwrite existing files or directories if the destination already exists.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "result": {
          "anyOf": [
            {
              "description": "A map of variables to store results from the action.",
              "type": "object",
              "properties": {
                "destination": {
                  "description": "Stores the destination path in a variable.",
                  "examples": [
                    "downloadPath"
                  ],
                  "type": "string",
                  "minLength": 1
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "\\$\\{[\\s\\S]+?\\}": {}
              }
            },
            {
              "description": "A map of variables to store results from the action.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "source": {
          "description": "The base URL or source path to download files from.",
          "examples": [
            "https://example.com/assets/file.json",
            "github://user/repo/example.js",
            "github://user/repo/path/to/files/"
          ],
          "type": "string",
          "minLength": 1
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-execute-package": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Execute package",
      "description": "Executes a package using a runner, optionally handling interactive prompts.",
      "type": "object",
      "required": [
        "name",
        "package"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "arguments": {
          "anyOf": [
            {
              "description": "Command-line arguments to pass to the package.",
              "examples": [
                [
                  "--template",
                  "typescript"
                ]
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "description": "Command-line arguments to pass to the package.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "interactions": {
          "anyOf": [
            {
              "description": "Defines how to respond to interactive prompts based on output. Must contain at least one final interaction.",
              "type": "array",
              "minItems": 1,
              "maxContains": 1,
              "minContains": 1,
              "contains": {
                "type": "object",
                "required": [
                  "final"
                ],
                "properties": {
                  "final": {
                    "type": "boolean",
                    "const": true
                  }
                }
              },
              "items": {
                "anyOf": [
                  {
                    "description": "An interaction rule triggered by matching output.",
                    "type": "object",
                    "anyOf": [
                      {
                        "required": [
                          "when",
                          "then",
                          "final"
                        ]
                      },
                      {
                        "required": [
                          "when",
                          "then"
                        ]
                      },
                      {
                        "required": [
                          "when",
                          "final"
                        ]
                      }
                    ],
                    "required": [
                      "when"
                    ],
                    "properties": {
                      "then": {
                        "anyOf": [
                          {
                            "description": "A list of responses to send when the matching text is found.",
                            "examples": [
                              "Hello world",
                              "[enter]",
                              "[space]",
                              "[down]",
                              "[up]",
                              "[left]",
                              "[right]",
                              "[backspace]"
                            ],
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "type": "string",
                              "anyOf": [
                                {
                                  "type": "string",
                                  "enum": [
                                    "[enter]",
                                    "[space]",
                                    "[down]",
                                    "[up]",
                                    "[left]",
                                    "[right]",
                                    "[backspace]"
                                  ]
                                },
                                {
                                  "type": "string",
                                  "minLength": 1
                                }
                              ]
                            }
                          },
                          {
                            "description": "A list of responses to send when the matching text is found.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      },
                      "pattern": {
                        "anyOf": [
                          {
                            "description": "Whether to treat the matching text as a regex pattern.",
                            "type": "boolean"
                          },
                          {
                            "description": "Whether to treat the matching text as a regex pattern.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      },
                      "always": {
                        "anyOf": [
                          {
                            "description": "Whether the rule should apply multiple times. If false or omitted, the rule is only applied the first time it matches.",
                            "type": "boolean"
                          },
                          {
                            "description": "Whether the rule should apply multiple times. If false or omitted, the rule is only applied the first time it matches.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      },
                      "final": {
                        "anyOf": [
                          {
                            "description": "Whether this interaction is the last one to be applied.",
                            "type": "boolean"
                          },
                          {
                            "description": "Whether this interaction is the last one to be applied.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      },
                      "when": {
                        "description": "The text or pattern to match against the output.",
                        "examples": [
                          "Would you like to use TypeScript?",
                          "^Overwrite.*"
                        ],
                        "type": "string"
                      }
                    },
                    "additionalProperties": false,
                    "patternProperties": {
                      "\\$\\{[\\s\\S]+?\\}": {}
                    }
                  },
                  {
                    "description": "An interaction rule triggered by matching output.",
                    "type": "string",
                    "$ref": "#/$defs/dynamic-value"
                  }
                ]
              }
            },
            {
              "description": "Defines how to respond to interactive prompts based on output. Must contain at least one final interaction.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "execute-package"
        },
        "package": {
          "description": "The name of the package to execute.",
          "examples": [
            "create-react-app",
            "eslint"
          ],
          "type": "string"
        },
        "runner": {
          "anyOf": [
            {
              "description": "The runner to use when executing the package.",
              "type": "string",
              "enum": [
                "npm",
                "pnpm",
                "yarn",
                "bun"
              ]
            },
            {
              "description": "The runner to use when executing the package.",
              "type": "string",
              "$ref": "#/$defs/dynamic-string"
            }
          ]
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-fail": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Fail",
      "description": "Fails the execution with a custom message and optional suggestions or links.",
      "examples": [
        {
          "title": "Missing configuration",
          "details": [
            "File not found: `project.json`",
            "Required field `name` is missing"
          ],
          "links": [
            {
              "label": "How to configure your project",
              "url": "https://docs.example.com/configuration"
            }
          ],
          "message": "The project is missing a valid configuration file.",
          "name": "fail",
          "suggestions": [
            "Create a configuration file named project.json",
            "Refer to the project setup guide"
          ]
        }
      ],
      "$ref": "#/$defs/template-help",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "fail"
        }
      },
      "unevaluatedProperties": false
    },
    "template-action-format-code": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Format code",
      "description": "Formats code using the project's configured formatter.",
      "examples": [
        {
          "files": [
            "src/index.ts",
            "src/components/Button.tsx"
          ],
          "name": "format-code"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "files"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "files": {
          "anyOf": [
            {
              "description": "The list of file paths to format.",
              "examples": [
                [
                  "src/index.ts",
                  "src/components/Button.tsx"
                ],
                [
                  "config.json"
                ]
              ],
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string",
                "minLength": 1
              }
            },
            {
              "description": "The list of file paths to format.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "format-code"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-import": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Import template",
      "description": "Imports and executes another template.",
      "examples": [
        {
          "name": "import",
          "options": {
            "projectName": "my-app"
          },
          "template": "croct://project"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "template"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "import"
        },
        "options": {
          "description": "Options to pass to the imported template.",
          "examples": [
            {
              "enableAnalytics": true,
              "features": [
                "auth",
                "payments"
              ],
              "projectName": "my-app"
            }
          ],
          "type": "object",
          "additionalProperties": true
        },
        "template": {
          "description": "The URI of the template to import. It can be a relative path to a local file or an absolute URL to a remote template.",
          "examples": [
            "croct://path/to/template",
            "https://example.com/template.json"
          ],
          "type": "string",
          "minLength": 1
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-initialize": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Initialize project",
      "description": "Initializes a Croct project in the current directory.",
      "examples": [
        {
          "name": "initialize"
        }
      ],
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "initialize"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-locate-file": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Locate file",
      "description": "Searches for files under a directory path based on a specified pattern.",
      "examples": [
        {
          "depth": 3,
          "limit": 1,
          "matcher": {
            "pattern": "export default"
          },
          "name": "locate-file",
          "path": "src",
          "result": "mainFile"
        },
        {
          "matcher": {
            "type": "and",
            "matchers": [
              {
                "pattern": "Service"
              },
              {
                "pattern": "export",
                "caseSensitive": true
              }
            ]
          },
          "name": "locate-file",
          "path": "packages",
          "result": "serviceFiles"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "path",
        "result"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "depth": {
          "anyOf": [
            {
              "description": "The maximum depth to search from the base path, where 0 is the base path itself.",
              "examples": [
                0,
                2
              ],
              "type": "number",
              "minimum": 0
            },
            {
              "description": "The maximum depth to search from the base path, where 0 is the base path itself.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "limit": {
          "anyOf": [
            {
              "description": "Limits the number of files to return.",
              "examples": [
                1,
                5
              ],
              "type": "number",
              "minimum": 1
            },
            {
              "description": "Limits the number of files to return.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "matcher": {
          "anyOf": [
            {
              "description": "The criteria to match files against.",
              "$ref": "#/$defs/template-action-locate-file/$defs/matcher",
              "type": "object"
            },
            {
              "description": "The criteria to match files against.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "locate-file"
        },
        "path": {
          "description": "The base path to start searching from.",
          "examples": [
            "./src",
            "packages/utils"
          ],
          "type": "string",
          "minLength": 1
        },
        "result": {
          "description": "The variable name to store the result of the search as an array of file paths.",
          "examples": [
            "matches",
            "foundFiles"
          ],
          "type": "string"
        }
      },
      "additionalProperties": false,
      "$defs": {
        "matcher": {
          "description": "The criteria to match files against.",
          "oneOf": [
            {
              "description": "A matcher based on a single pattern.",
              "type": "object",
              "required": [
                "pattern"
              ],
              "properties": {
                "pattern": {
                  "description": "The pattern to match against file content.",
                  "examples": [
                    "function main",
                    "class .*Service"
                  ],
                  "type": "string",
                  "minLength": 1
                },
                "caseSensitive": {
                  "anyOf": [
                    {
                      "description": "Whether the pattern matching should be case-sensitive.",
                      "type": "boolean"
                    },
                    {
                      "description": "Whether the pattern matching should be case-sensitive.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "\\$\\{[\\s\\S]+?\\}": {}
              }
            },
            {
              "description": "A composite matcher combining multiple matchers using logical operators.",
              "type": "object",
              "required": [
                "type",
                "matchers"
              ],
              "properties": {
                "type": {
                  "anyOf": [
                    {
                      "description": "Defines how to combine the child matchers.",
                      "type": "string",
                      "enum": [
                        "and",
                        "or"
                      ]
                    },
                    {
                      "description": "Defines how to combine the child matchers.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "matchers": {
                  "anyOf": [
                    {
                      "description": "A list of matchers to combine.",
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "anyOf": [
                          {
                            "$ref": "#/$defs/template-action-locate-file/$defs/matcher"
                          },
                          {
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      }
                    },
                    {
                      "description": "A list of matchers to combine.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-value"
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "\\$\\{[\\s\\S]+?\\}": {}
              }
            }
          ]
        }
      },
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-open-link": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Open link",
      "description": "Opens a URL in the user's default browser.",
      "examples": [
        {
          "name": "open-link",
          "url": "https://croct.com"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "url"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "open-link"
        },
        "url": {
          "anyOf": [
            {
              "description": "The URL to open in the browser.",
              "examples": [
                "https://croct.com",
                "https://docs.croct.com"
              ],
              "type": "string",
              "pattern": "^https?://.*",
              "format": "uri"
            },
            {
              "description": "The URL to open in the browser.",
              "type": "string",
              "$ref": "#/$defs/dynamic-string"
            }
          ]
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-print": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Print message",
      "description": "Prints a message to the console with optional semantic styling and title.",
      "examples": [
        {
          "title": "Done!",
          "message": "Your project is ready to use.",
          "name": "print",
          "semantic": "success"
        },
        {
          "message": "Failed to load configuration.",
          "name": "print",
          "semantic": "error"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "message"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "title": {
          "description": "An optional title shown before the message.",
          "examples": [
            "Setup complete",
            "Oops!"
          ],
          "type": "string",
          "minLength": 1
        },
        "message": {
          "description": "The main content of the message to display.",
          "examples": [
            "Your project has been initialized successfully.",
            "Something went wrong. Please try again."
          ],
          "type": "string",
          "minLength": 1
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "print"
        },
        "semantics": {
          "anyOf": [
            {
              "description": "The intent behind the message for visual presentation.",
              "examples": [
                "info",
                "success"
              ],
              "type": "string",
              "enum": [
                "neutral",
                "info",
                "error",
                "warning",
                "success"
              ]
            },
            {
              "description": "The intent behind the message for visual presentation.",
              "type": "string",
              "$ref": "#/$defs/dynamic-string"
            }
          ]
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-prompt-choice": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Choice prompt",
      "description": "Asks the user to select one option from a list.",
      "examples": [
        {
          "default": "pro",
          "type": "choice",
          "message": "Select a plan:",
          "name": "prompt",
          "options": [
            {
              "value": "basic"
            },
            {
              "label": "Pro Plan",
              "value": "pro"
            }
          ],
          "result": "selectedPlan"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "type",
        "message",
        "options",
        "result"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "default": {
          "description": "Default selected value.",
          "examples": [
            "pro"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of prompt.",
          "type": "string",
          "const": "choice"
        },
        "message": {
          "description": "The choice prompt message.",
          "examples": [
            "Select a plan:"
          ],
          "type": "string",
          "minLength": 1
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "prompt"
        },
        "options": {
          "anyOf": [
            {
              "description": "List of selectable options.",
              "type": "array",
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "type": "object",
                    "required": [
                      "value"
                    ],
                    "properties": {
                      "disabled": {
                        "anyOf": [
                          {
                            "description": "If true, the option is not selectable.",
                            "type": "boolean"
                          },
                          {
                            "description": "If true, the option is not selectable.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      },
                      "label": {
                        "description": "Displayed option label.",
                        "type": "string",
                        "minLength": 1
                      },
                      "value": {
                        "description": "Value stored if selected.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false,
                    "patternProperties": {
                      "\\$\\{[\\s\\S]+?\\}": {}
                    }
                  },
                  {
                    "type": "string",
                    "$ref": "#/$defs/dynamic-value"
                  }
                ]
              }
            },
            {
              "description": "List of selectable options.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "result": {
          "description": "Variable to store the chosen option value.",
          "examples": [
            "selectedPlan"
          ],
          "type": "string",
          "minLength": 1
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-prompt-confirmation": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Confirmation prompt",
      "description": "Asks the user to confirm (yes/no).",
      "examples": [
        {
          "default": true,
          "type": "confirmation",
          "message": "Proceed?",
          "name": "prompt",
          "result": "shouldProceed"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "type",
        "message",
        "result"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "default": {
          "anyOf": [
            {
              "description": "Default value if user presses enter without input.",
              "examples": [
                true
              ],
              "type": "boolean"
            },
            {
              "description": "Default value if user presses enter without input.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "type": {
          "description": "The type of prompt.",
          "type": "string",
          "const": "confirmation"
        },
        "message": {
          "description": "The confirmation prompt message.",
          "examples": [
            "Are you sure you want to proceed?"
          ],
          "type": "string",
          "minLength": 1
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "prompt"
        },
        "result": {
          "description": "Variable to store the response.",
          "examples": [
            "shouldProceed"
          ],
          "type": "string",
          "minLength": 1
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-prompt-keypress": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Choice prompt",
      "description": "Waits for a specific keypress from the user.",
      "examples": [
        {
          "type": "keypress",
          "key": "[enter]",
          "message": "Press enter to continue:",
          "name": "prompt",
          "result": "pressedKey"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "type",
        "message"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "type": {
          "description": "The type of prompt.",
          "type": "string",
          "const": "keypress"
        },
        "key": {
          "description": "Specific key to wait for.",
          "examples": [
            "[enter]",
            "[space]",
            "y"
          ],
          "type": "string",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "[enter]",
                "[space]"
              ]
            },
            {
              "type": "string",
              "maxLength": 1,
              "minLength": 1
            }
          ]
        },
        "message": {
          "description": "The keypress prompt message.",
          "examples": [
            "Press enter to continue:"
          ],
          "type": "string",
          "minLength": 1
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "prompt"
        },
        "result": {
          "description": "Variable to store the pressed key.",
          "examples": [
            "pressedKey"
          ],
          "type": "string",
          "minLength": 1
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-prompt-multi-choice": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Multi-choice prompt",
      "description": "Asks the user to select multiple options from a list.",
      "examples": [
        {
          "type": "multi-choice",
          "max": 3,
          "message": "Select your interests:",
          "min": 1,
          "name": "prompt",
          "options": [
            {
              "value": "sports"
            },
            {
              "label": "Music",
              "value": "music"
            },
            {
              "label": "Art",
              "selected": true,
              "value": "art"
            }
          ],
          "result": "selectedInterests"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "type",
        "message",
        "options",
        "result"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "type": {
          "description": "The type of prompt.",
          "type": "string",
          "const": "multi-choice"
        },
        "max": {
          "anyOf": [
            {
              "description": "Maximum selectable options.",
              "type": "number",
              "minimum": 1
            },
            {
              "description": "Maximum selectable options.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "message": {
          "description": "The multiple choice prompt message.",
          "examples": [
            "Select your interests:"
          ],
          "type": "string",
          "minLength": 1
        },
        "min": {
          "anyOf": [
            {
              "description": "Minimum options required to select.",
              "type": "number",
              "minimum": 0
            },
            {
              "description": "Minimum options required to select.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "prompt"
        },
        "options": {
          "anyOf": [
            {
              "description": "List of selectable options.",
              "type": "array",
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "type": "object",
                    "required": [
                      "value"
                    ],
                    "properties": {
                      "disabled": {
                        "anyOf": [
                          {
                            "description": "If true, option is not selectable.",
                            "type": "boolean"
                          },
                          {
                            "description": "If true, option is not selectable.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      },
                      "label": {
                        "description": "Displayed option label.",
                        "type": "string",
                        "minLength": 1
                      },
                      "selected": {
                        "anyOf": [
                          {
                            "description": "If true, option is initially selected.",
                            "default": false,
                            "type": "boolean"
                          },
                          {
                            "description": "If true, option is initially selected.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      },
                      "value": {
                        "description": "Value stored if selected.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false,
                    "patternProperties": {
                      "\\$\\{[\\s\\S]+?\\}": {}
                    }
                  },
                  {
                    "type": "string",
                    "$ref": "#/$defs/dynamic-value"
                  }
                ]
              }
            },
            {
              "description": "List of selectable options.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "result": {
          "description": "Variable to store selected options.",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-prompt-text": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Choice prompt",
      "description": "Prompts the user for free-form text input.",
      "examples": [
        {
          "type": "text",
          "required": true,
          "message": "Enter your name:",
          "name": "prompt",
          "result": "userName"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "type",
        "message",
        "result"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "default": {
          "description": "Default input if user presses enter.",
          "examples": [
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of prompt.",
          "type": "string",
          "const": "text"
        },
        "required": {
          "anyOf": [
            {
              "description": "If true, input cannot be empty.",
              "type": "boolean"
            },
            {
              "description": "If true, input cannot be empty.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "message": {
          "description": "The text input prompt message.",
          "examples": [
            "Enter your name:"
          ],
          "type": "string",
          "minLength": 1
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "prompt"
        },
        "result": {
          "description": "Variable to store user input.",
          "examples": [
            "userName"
          ],
          "type": "string",
          "minLength": 1
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-prompt": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Prompt",
      "description": "Prompts the user for input, confirmation, choices, or keypress interactions.",
      "type": "object",
      "oneOf": [
        {
          "$ref": "#/$defs/template-action-prompt-confirmation",
          "type": "object"
        },
        {
          "$ref": "#/$defs/template-action-prompt-choice",
          "type": "object"
        },
        {
          "$ref": "#/$defs/template-action-prompt-multi-choice",
          "type": "object"
        },
        {
          "$ref": "#/$defs/template-action-prompt-text",
          "type": "object"
        },
        {
          "$ref": "#/$defs/template-action-prompt-keypress",
          "type": "object"
        }
      ]
    },
    "template-action-repeat": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Repeat action",
      "description": "Repeats one or more actions while the condition evaluates to true.",
      "examples": [
        {
          "actions": [
            {
              "message": "Trying again...",
              "name": "print"
            },
            {
              "name": "define",
              "variables": {
                "retryCount": "${this.retryCount + 1}"
              }
            }
          ],
          "condition": "${this.retryCount < 3}",
          "name": "repeat"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "condition",
        "actions"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "actions": {
          "anyOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/template-action",
                  "type": "object"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/$defs/template-action",
                        "type": "object"
                      },
                      {
                        "type": "string",
                        "$ref": "#/$defs/dynamic-value"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "condition": {
          "description": "The expression that is evaluated before each iteration.",
          "examples": [
            "${this.step < 5}",
            "${this.continueLoop}"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "repeat"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-replace-file-content": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Replace file content",
      "description": "Replaces content in one or more files using regular expression patterns.",
      "examples": [
        {
          "files": [
            {
              "path": "src/constants.ts",
              "replacements": [
                {
                  "pattern": "APP_NAME",
                  "value": "Croct"
                },
                {
                  "pattern": "\\\\{VERSION\\\\}",
                  "caseSensitive": true,
                  "value": "1.0.0"
                }
              ]
            }
          ],
          "name": "replace-file-content"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "files"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "files": {
          "anyOf": [
            {
              "description": "The list of files and the replacements to apply in each.",
              "type": "array",
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "type": "object",
                    "required": [
                      "path",
                      "replacements"
                    ],
                    "properties": {
                      "path": {
                        "description": "The path to the file to be modified.",
                        "examples": [
                          "src/index.ts",
                          "README.md"
                        ],
                        "type": "string"
                      },
                      "replacements": {
                        "anyOf": [
                          {
                            "description": "The list of replacements to apply within the file.",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                              "anyOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "pattern",
                                    "value"
                                  ],
                                  "properties": {
                                    "pattern": {
                                      "description": "A valid regular expression pattern used to find matches to replace.",
                                      "examples": [
                                        "APP_NAME",
                                        "\\\\{VERSION\\\\}"
                                      ],
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "caseSensitive": {
                                      "anyOf": [
                                        {
                                          "description": "Whether the pattern matching should be case-sensitive.",
                                          "type": "boolean"
                                        },
                                        {
                                          "description": "Whether the pattern matching should be case-sensitive.",
                                          "type": "string",
                                          "$ref": "#/$defs/dynamic-value"
                                        }
                                      ]
                                    },
                                    "value": {
                                      "description": "The value to replace the matched pattern with.",
                                      "examples": [
                                        "Croct",
                                        42
                                      ],
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "number"
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "patternProperties": {
                                    "\\$\\{[\\s\\S]+?\\}": {}
                                  }
                                },
                                {
                                  "type": "string",
                                  "$ref": "#/$defs/dynamic-value"
                                }
                              ]
                            }
                          },
                          {
                            "description": "The list of replacements to apply within the file.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "patternProperties": {
                      "\\$\\{[\\s\\S]+?\\}": {}
                    }
                  },
                  {
                    "type": "string",
                    "$ref": "#/$defs/dynamic-value"
                  }
                ]
              }
            },
            {
              "description": "The list of files and the replacements to apply in each.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "replace-file-content"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-run": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Run actions",
      "description": "Executes one or more actions.",
      "examples": [
        {
          "actions": [
            {
              "message": "Step 1 complete",
              "name": "print"
            },
            {
              "message": "Step 2 complete",
              "name": "print"
            }
          ],
          "name": "run"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "actions"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "actions": {
          "anyOf": [
            {
              "description": "The action or list of actions to execute.",
              "oneOf": [
                {
                  "$ref": "#/$defs/template-action",
                  "type": "object"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/$defs/template-action",
                        "type": "object"
                      },
                      {
                        "type": "string",
                        "$ref": "#/$defs/dynamic-value"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "description": "The action or list of actions to execute.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "run"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-start-server": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Start server",
      "description": "Starts the project's development server or detects if it's already running.",
      "examples": [
        {
          "name": "start-server",
          "result": {
            "owned": "isDevServerOwned",
            "url": "devServerUrl"
          }
        }
      ],
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "start-server"
        },
        "result": {
          "anyOf": [
            {
              "description": "Stores details about the development server.",
              "type": "object",
              "properties": {
                "owned": {
                  "description": "Whether the this action started the server or if it was already running.",
                  "examples": [
                    "isOwned"
                  ],
                  "type": "string"
                },
                "url": {
                  "description": "The variable that receives the URL of the local server.",
                  "examples": [
                    "serverUrl"
                  ],
                  "type": "string",
                  "minLength": 1
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "\\$\\{[\\s\\S]+?\\}": {}
              }
            },
            {
              "description": "Stores details about the development server.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-stop-server": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Stop server",
      "description": "Stops the project's development server if it was started by the current process.",
      "examples": [
        {
          "name": "stop-server"
        }
      ],
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "stop-server"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-test": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Test condition",
      "description": "Executes one or more actions depending on the result of a boolean condition.",
      "examples": [
        {
          "then": [
            {
              "message": "Condition is true",
              "name": "print"
            }
          ],
          "else": [
            {
              "message": "Condition is false",
              "name": "print"
            }
          ],
          "condition": "${this.condition}",
          "name": "test"
        }
      ],
      "type": "object",
      "required": [
        "name",
        "condition",
        "then"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "then": {
          "anyOf": [
            {
              "description": "Actions executed if the condition is true.",
              "oneOf": [
                {
                  "$ref": "#/$defs/template-action",
                  "type": "object"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/$defs/template-action",
                        "type": "object"
                      },
                      {
                        "type": "string",
                        "$ref": "#/$defs/dynamic-value"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "description": "Actions executed if the condition is true.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "else": {
          "anyOf": [
            {
              "description": "Actions executed if the condition is false.",
              "oneOf": [
                {
                  "$ref": "#/$defs/template-action",
                  "type": "object"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/$defs/template-action",
                        "type": "object"
                      },
                      {
                        "type": "string",
                        "$ref": "#/$defs/dynamic-value"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "description": "Actions executed if the condition is false.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "condition": {
          "description": "The condition that determines which branch of actions is executed.",
          "examples": [
            "${this.condition}",
            "${this.isDevServerOwned}"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "test"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-action-try": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Try",
      "description": "Attempts to run an action or list of actions and optionally handles errors or cleanup.",
      "examples": [
        {
          "action": [
            {
              "actions": [
                {
                  "message": "Step 1 complete",
                  "name": "print"
                }
              ],
              "name": "run"
            }
          ],
          "help": {
            "links": [
              {
                "label": "Troubleshooting guide",
                "url": "https://docs.example.com"
              }
            ],
            "message": "Failed to run the action.",
            "suggestions": [
              "Run `npm install`"
            ]
          },
          "name": "try"
        }
      ],
      "type": "object",
      "anyOf": [
        {
          "properties": {
            "else": {
              "anyOf": [
                {
                  "description": "Fallback actions to run if the primary action fails.",
                  "oneOf": [
                    {
                      "$ref": "#/$defs/template-action",
                      "type": "object"
                    },
                    {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "anyOf": [
                          {
                            "$ref": "#/$defs/template-action",
                            "type": "object"
                          },
                          {
                            "type": "string",
                            "$ref": "#/$defs/dynamic-value"
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "description": "Fallback actions to run if the primary action fails.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            }
          }
        },
        {
          "properties": {
            "help": {
              "anyOf": [
                {
                  "description": "Help message to display if the action fails.",
                  "$ref": "#/$defs/template-help",
                  "type": "object",
                  "unevaluatedProperties": false
                },
                {
                  "description": "Help message to display if the action fails.",
                  "type": "string",
                  "$ref": "#/$defs/dynamic-value"
                }
              ]
            }
          }
        }
      ],
      "required": [
        "name",
        "action"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "action": {
          "anyOf": [
            {
              "description": "The primary actions to attempt.",
              "oneOf": [
                {
                  "$ref": "#/$defs/template-action",
                  "type": "object"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/$defs/template-action",
                        "type": "object"
                      },
                      {
                        "type": "string",
                        "$ref": "#/$defs/dynamic-value"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "description": "The primary actions to attempt.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "finally": {
          "anyOf": [
            {
              "description": "Actions to run regardless of success or failure.",
              "oneOf": [
                {
                  "$ref": "#/$defs/template-action",
                  "type": "object"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/$defs/template-action",
                        "type": "object"
                      },
                      {
                        "type": "string",
                        "$ref": "#/$defs/dynamic-value"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "description": "Actions to run regardless of success or failure.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "name": {
          "description": "The name of the action.",
          "type": "string",
          "const": "try"
        }
      },
      "unevaluatedProperties": false
    },
    "template-catalog-template-metadata": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Template metadata",
      "description": "Metadata of templates listed in the catalog.",
      "type": "object",
      "required": [
        "id",
        "author",
        "sourceUrl",
        "coverImageUrl",
        "installationUrl",
        "categories",
        "documentation"
      ],
      "properties": {
        "id": {
          "anyOf": [
            {
              "description": "The ID of the template in the catalog.",
              "type": "string",
              "pattern": "^[a-z0-9-]+$",
              "minLength": 1
            },
            {
              "description": "The ID of the template in the catalog.",
              "type": "string",
              "$ref": "#/$defs/dynamic-string"
            }
          ]
        },
        "author": {
          "anyOf": [
            {
              "description": "The author of the template.",
              "type": "object",
              "required": [
                "name",
                "avatarUrl",
                "websiteUrl"
              ],
              "properties": {
                "avatarUrl": {
                  "anyOf": [
                    {
                      "description": "The URL of the author's avatar.",
                      "type": "string",
                      "pattern": "^https://",
                      "format": "uri",
                      "minLength": 1
                    },
                    {
                      "description": "The URL of the author's avatar.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                },
                "name": {
                  "description": "The name of the author.",
                  "type": "string",
                  "minLength": 1
                },
                "websiteUrl": {
                  "anyOf": [
                    {
                      "description": "The URL of the author's website.",
                      "type": "string",
                      "pattern": "^https://",
                      "format": "uri",
                      "minLength": 1
                    },
                    {
                      "description": "The URL of the author's website.",
                      "type": "string",
                      "$ref": "#/$defs/dynamic-string"
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "patternProperties": {
                "\\$\\{[\\s\\S]+?\\}": {}
              }
            },
            {
              "description": "The author of the template.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "categories": {
          "anyOf": [
            {
              "description": "The categories of the template.",
              "type": "array",
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "description": "The ID of the category.",
                    "type": "string",
                    "pattern": "^[a-z0-9-]+$",
                    "minLength": 1
                  },
                  {
                    "description": "The ID of the category.",
                    "type": "string",
                    "$ref": "#/$defs/dynamic-string"
                  }
                ]
              }
            },
            {
              "description": "The categories of the template.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "coverImageUrl": {
          "anyOf": [
            {
              "description": "The URL of the cover image.",
              "type": "string",
              "pattern": "^https://",
              "format": "uri",
              "minLength": 1
            },
            {
              "description": "The URL of the cover image.",
              "type": "string",
              "$ref": "#/$defs/dynamic-string"
            }
          ]
        },
        "coverVideoUrl": {
          "anyOf": [
            {
              "description": "The URL of the cover video.",
              "type": "string",
              "pattern": "^https://",
              "format": "uri",
              "minLength": 0
            },
            {
              "description": "The URL of the cover video.",
              "type": "string",
              "$ref": "#/$defs/dynamic-string"
            }
          ]
        },
        "demoUrl": {
          "anyOf": [
            {
              "description": "The URL of the demo page.",
              "type": "string",
              "pattern": "^https://",
              "format": "uri",
              "minLength": 0
            },
            {
              "description": "The URL of the demo page.",
              "type": "string",
              "$ref": "#/$defs/dynamic-string"
            }
          ]
        },
        "deployUrl": {
          "anyOf": [
            {
              "description": "The URL to deploy the template.",
              "type": "string",
              "pattern": "^https://",
              "format": "uri",
              "minLength": 0
            },
            {
              "description": "The URL to deploy the template.",
              "type": "string",
              "$ref": "#/$defs/dynamic-string"
            }
          ]
        },
        "documentation": {
          "description": "The template documentation in markdown format.",
          "type": "string",
          "minLength": 1
        },
        "installationUrl": {
          "description": "The URL used to install the template via CLI.",
          "type": "string",
          "format": "uri",
          "minLength": 1
        },
        "relatedTemplates": {
          "anyOf": [
            {
              "description": "The IDs of the related templates.",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "description": "The ID of the related template.",
                    "type": "string",
                    "pattern": "^[a-z0-9-]+$",
                    "minLength": 1
                  },
                  {
                    "description": "The ID of the related template.",
                    "type": "string",
                    "$ref": "#/$defs/dynamic-string"
                  }
                ]
              }
            },
            {
              "description": "The IDs of the related templates.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "sourceUrl": {
          "anyOf": [
            {
              "description": "The URL of the template source code.",
              "type": "string",
              "pattern": "^https://",
              "format": "uri",
              "minLength": 1
            },
            {
              "description": "The URL of the template source code.",
              "type": "string",
              "$ref": "#/$defs/dynamic-string"
            }
          ]
        },
        "verified": {
          "anyOf": [
            {
              "description": "Whether the template is verified by Croct.",
              "type": "boolean"
            },
            {
              "description": "Whether the template is verified by Croct.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "template-help": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Help",
      "description": "A help message that provides information to the user when something goes wrong.",
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "title": {
          "description": "A short and descriptive title for the failure message.",
          "examples": [
            "Missing configuration",
            "Unsupported version"
          ],
          "type": "string",
          "minLength": 1
        },
        "details": {
          "anyOf": [
            {
              "description": "Optional technical details about the failure, typically used for debugging.",
              "examples": [
                [
                  "Missing 'project.json'",
                  "Expected key 'name' not found"
                ]
              ],
              "type": "array",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "string",
                "minLength": 1
              }
            },
            {
              "description": "Optional technical details about the failure, typically used for debugging.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "links": {
          "anyOf": [
            {
              "description": "A list of helpful links related to the failure.",
              "examples": [
                [
                  {
                    "label": "Documentation",
                    "url": "https://docs.example.com/configuration"
                  }
                ]
              ],
              "type": "array",
              "uniqueItems": true,
              "items": {
                "anyOf": [
                  {
                    "type": "object",
                    "required": [
                      "label",
                      "url"
                    ],
                    "properties": {
                      "label": {
                        "description": "A label that describes the link.",
                        "examples": [
                          "Documentation",
                          "Support"
                        ],
                        "type": "string",
                        "minLength": 1
                      },
                      "url": {
                        "anyOf": [
                          {
                            "description": "The URL for the help link.",
                            "examples": [
                              "https://docs.example.com/configuration",
                              "https://support.example.com"
                            ],
                            "type": "string",
                            "pattern": "^https?://",
                            "format": "uri"
                          },
                          {
                            "description": "The URL for the help link.",
                            "type": "string",
                            "$ref": "#/$defs/dynamic-string"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "patternProperties": {
                      "\\$\\{[\\s\\S]+?\\}": {}
                    }
                  },
                  {
                    "type": "string",
                    "$ref": "#/$defs/dynamic-value"
                  }
                ]
              }
            },
            {
              "description": "A list of helpful links related to the failure.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "message": {
          "description": "The message shown to the user explaining the reason for the failure. Supports basic Markdown formatting such as italics, bold, and links.",
          "examples": [
            "The project is missing a valid configuration file."
          ],
          "type": "string",
          "minLength": 1
        },
        "suggestions": {
          "anyOf": [
            {
              "description": "A list of actionable suggestions to help resolve the issue.",
              "examples": [
                [
                  "Check the config file format",
                  "Ensure all required fields are present"
                ]
              ],
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string",
                "minLength": 1
              }
            },
            {
              "description": "A list of actionable suggestions to help resolve the issue.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        }
      }
    },
    "template-template": {
      "$schema": "https://json-schema.org/draft/2019-09/schema",
      "title": "Template",
      "description": "A template for creating projects, components, and other resources.",
      "type": "object",
      "required": [
        "actions",
        "title",
        "description"
      ],
      "properties": {
        "$schema": {
          "type": "string"
        },
        "title": {
          "description": "The title of the template.",
          "type": "string",
          "minLength": 1
        },
        "description": {
          "description": "A short description of the template.",
          "type": "string",
          "minLength": 1
        },
        "actions": {
          "anyOf": [
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/template-action",
                    "type": "object"
                  },
                  {
                    "type": "string",
                    "$ref": "#/$defs/dynamic-value"
                  }
                ]
              }
            },
            {
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        },
        "metadata": {
          "description": "Metadata about the template.",
          "type": "object"
        },
        "options": {
          "anyOf": [
            {
              "description": "The options for the template.",
              "type": "object",
              "propertyNames": {
                "anyOf": [
                  {
                    "description": "The name of the option.",
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_-]*$",
                    "minLength": 1
                  },
                  {
                    "description": "The name of the option.",
                    "type": "string",
                    "$ref": "#/$defs/dynamic-string"
                  }
                ]
              },
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "object",
                    "oneOf": [
                      {
                        "properties": {
                          "description": {
                            "description": "The description of the option.",
                            "examples": [
                              "The variable to store the result of the action."
                            ],
                            "type": "string",
                            "minLength": 1
                          },
                          "default": {
                            "description": "The default value for the reference.",
                            "examples": [
                              "projectName"
                            ],
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the option.",
                            "type": "string",
                            "const": "reference"
                          },
                          "required": {
                            "anyOf": [
                              {
                                "description": "Whether the option is required.",
                                "default": false,
                                "type": "boolean"
                              },
                              {
                                "description": "Whether the option is required.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "patternProperties": {
                          "\\$\\{[\\s\\S]+?\\}": {}
                        }
                      },
                      {
                        "properties": {
                          "description": {
                            "description": "The description of the option.",
                            "examples": [
                              "The name of the project."
                            ],
                            "type": "string",
                            "minLength": 1
                          },
                          "default": {
                            "description": "The default value for the option.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the option.",
                            "type": "string",
                            "const": "string"
                          },
                          "required": {
                            "anyOf": [
                              {
                                "description": "Whether the option is required.",
                                "default": false,
                                "type": "boolean"
                              },
                              {
                                "description": "Whether the option is required.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          },
                          "choices": {
                            "anyOf": [
                              {
                                "description": "The allowed values for the option.",
                                "type": "array",
                                "items": {
                                  "description": "The value of the option.",
                                  "type": "string"
                                }
                              },
                              {
                                "description": "The allowed values for the option.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "patternProperties": {
                          "\\$\\{[\\s\\S]+?\\}": {}
                        }
                      },
                      {
                        "properties": {
                          "description": {
                            "description": "The description of the option.",
                            "examples": [
                              "The default timeout."
                            ],
                            "type": "string",
                            "minLength": 1
                          },
                          "default": {
                            "anyOf": [
                              {
                                "description": "The default value for the option.",
                                "type": "number"
                              },
                              {
                                "description": "The default value for the option.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          },
                          "type": {
                            "description": "The type of the option.",
                            "type": "string",
                            "const": "number"
                          },
                          "required": {
                            "anyOf": [
                              {
                                "description": "Whether the option is required.",
                                "default": false,
                                "type": "boolean"
                              },
                              {
                                "description": "Whether the option is required.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "patternProperties": {
                          "\\$\\{[\\s\\S]+?\\}": {}
                        }
                      },
                      {
                        "properties": {
                          "description": {
                            "description": "The description of the option.",
                            "examples": [
                              "Whether to enable the feature."
                            ],
                            "type": "string",
                            "minLength": 1
                          },
                          "default": {
                            "anyOf": [
                              {
                                "description": "The default value for the option.",
                                "type": "boolean"
                              },
                              {
                                "description": "The default value for the option.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          },
                          "type": {
                            "description": "The type of the option.",
                            "type": "string",
                            "const": "boolean"
                          },
                          "required": {
                            "anyOf": [
                              {
                                "description": "Whether the option is required.",
                                "default": false,
                                "type": "boolean"
                              },
                              {
                                "description": "Whether the option is required.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "patternProperties": {
                          "\\$\\{[\\s\\S]+?\\}": {}
                        }
                      },
                      {
                        "properties": {
                          "description": {
                            "description": "The description of the option.",
                            "examples": [
                              "The list of items."
                            ],
                            "type": "string",
                            "minLength": 1
                          },
                          "default": {
                            "anyOf": [
                              {
                                "description": "The default value for the option.",
                                "type": "array",
                                "items": {}
                              },
                              {
                                "description": "The default value for the option.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          },
                          "type": {
                            "description": "The type of the option.",
                            "type": "string",
                            "const": "array"
                          },
                          "required": {
                            "anyOf": [
                              {
                                "description": "Whether the option is required.",
                                "default": false,
                                "type": "boolean"
                              },
                              {
                                "description": "Whether the option is required.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "patternProperties": {
                          "\\$\\{[\\s\\S]+?\\}": {}
                        }
                      },
                      {
                        "properties": {
                          "description": {
                            "description": "The description of the option.",
                            "examples": [
                              "The configuration object serialized as JSON."
                            ],
                            "type": "string",
                            "minLength": 1
                          },
                          "default": {
                            "description": "The default value for the option.",
                            "type": "object",
                            "additionalProperties": true
                          },
                          "type": {
                            "description": "The type of the option.",
                            "type": "string",
                            "const": "object"
                          },
                          "required": {
                            "anyOf": [
                              {
                                "description": "Whether the option is required.",
                                "default": false,
                                "type": "boolean"
                              },
                              {
                                "description": "Whether the option is required.",
                                "type": "string",
                                "$ref": "#/$defs/dynamic-value"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "patternProperties": {
                          "\\$\\{[\\s\\S]+?\\}": {}
                        }
                      }
                    ],
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "type": {
                        "description": "The type of the option.",
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "string",
                    "$ref": "#/$defs/dynamic-value"
                  }
                ]
              }
            },
            {
              "description": "The options for the template.",
              "type": "string",
              "$ref": "#/$defs/dynamic-value"
            }
          ]
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "\\$\\{[\\s\\S]+?\\}": {}
      }
    },
    "dynamic-string": {
      "type": "string",
      "description": "A dynamic string that is evaluated at runtime.",
      "pattern": "\\$\\{[\\s\\S]+?\\}",
      "examples": [
        "${this.value}",
        "${options.value}",
        "${this.value} ${options.value}"
      ]
    },
    "dynamic-value": {
      "type": "string",
      "description": "A dynamic value that is evaluated at runtime.",
      "pattern": "^\\$\\{[\\s\\S]+\\}$",
      "examples": [
        "${this.value}",
        "${options.value}",
        "${this.value + options.value}"
      ]
    }
  }
}